{
    "openapi": "3.0.0",
    "info": {
        "title": "ORK4 API",
        "description": "This page serves as both documentation of the ORK's API structure as well as a place to test it.<br>\n *\tTo access routes/methods that require permissions, you'll need to send a bearer_token for the User.  That token can be retrieved by either logging in or changing your password, which you will need to do the first time you use ORK4.  The various login functions can be found below under the heading 'Base'.  When you have your bearer token, you can apply it for use in these tools by hitting that Authorize button below.  Otherwise, you'll need to add it to your headers in your RESTful client: 'Authorization: Bearer asdf'.\n *\tMost of the functions below work just fine on this UI, but some don't.  If you get unexpected results in a search, or if you want a better testing mechanism, I suggest a browser RESTful client.  I use the Firefox browser extension RESTclient.  The tools below, at least, will get you started, and expose everything you'll need to know to develop with the ORK4 API.",
        "termsOfService": "https://dev.ork4.org/terms",
        "contact": {
            "name": "ORK4 Support (Chiba)",
            "email": "support@ork4.org"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "/api"
        }
    ],
    "paths": {
        "/accounts": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Get a listing of the Accounts.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccountable (Realm, Chapter, or Unit) (MorphTo): Realm, Chapter, or Unit that owns this Account.<br>\r\n\t\t\tparent (Account) (BelongsTo): Parent Account, if any.<br>\r\n\t\t\tsplits (Split) (HasMany): Splits for this Account.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "20f6d7795269a1a567b9f0d8d1338dd5",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Accounts retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Store a newly created Account in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "1f50468200a29198f9ecc0fcae98eff0",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Account"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Account saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/accounts/{id}": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Display the specified Account",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccountable (Realm, Chapter, or Unit) (MorphTo): Realm, Chapter, or Unit that owns this Account.<br>\r\n\t\t\tparent (Account) (BelongsTo): Parent Account, if any.<br>\r\n\t\t\tsplits (Split) (HasMany): Splits for this Account.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "79ec64efaf9880099af5a9bb51b492e9",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Account",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Account retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Update the specified Account in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "42975803a9be2ee8ba078aa40bb5243a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Account",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Account"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Account updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Account"
                ],
                "summary": "Remove the specified Account from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "8ac421261b91b0e12bc83765f0ebcffd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Account",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Account deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/archetypes": {
            "get": {
                "tags": [
                    "Archetype"
                ],
                "summary": "Get a listing of the Archetypes.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (HasMany): Attendances with this Archetype.<br>\r\n\t\t\treconciliations (Reconciliation) (HasMany): Reconciliations with this Archetype.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "a72f65efc6a2d9254cc3ebb9a14c4be2",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archetypes retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Archetype"
                ],
                "summary": "Store a newly created Archetype in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "9afa651ffab08e8e1cb62d7f2d717a53",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Archetype"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archetype saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/archetypes/{id}": {
            "get": {
                "tags": [
                    "Archetype"
                ],
                "summary": "Display the specified Archetype",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (HasMany): Attendances with this Archetype.<br>\r\n\t\t\treconciliations (Reconciliation) (HasMany): Reconciliations with this Archetype.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "30f60e9b9363b6cb540e88e128a07a1f",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Archetype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archetype retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Archetype"
                ],
                "summary": "Update the specified Archetype in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "e832dd49023931996beba77927d79176",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Archetype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Archetype"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archetype updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Archetype"
                ],
                "summary": "Remove the specified Archetype from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "ea8ebea63eb19f3ea33a08f37a569d98",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Archetype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArchetypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archetype deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/attendances": {
            "get": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Get a listing of the Attendances.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendable (Event or Meetup) (MorphTo): Event or Meetup the Attendance is for.<br>\r\n\t\t\tarchetype (Archetype) (BelongsTo): Selected Archetype for the Attendance.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Selected Persona receiveing the Attendance credit.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "372379b867231a83c5a67daa74c790e1",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Attendances retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Store a newly created Attendance in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "d73397659f450225abf63c1be0e8c329",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attendance"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Attendance saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/attendances/{id}": {
            "get": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Display the specified Attendance",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendable (Event or Meetup) (MorphTo): Event or Meetup the Attendance is for.<br>\r\n\t\t\tarchetype (Archetype) (BelongsTo): Selected Archetype for the Attendance.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Selected Persona receiveing the Attendance credit.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "8bbd87a0b0d8f33ece640a93de8f11c0",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Attendance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Attendance retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Update the specified Attendance in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "4a1e1a84140e74a41eafe385aa8f1c33",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Attendance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attendance"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Attendance updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Remove the specified Attendance from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "737cf46af46fb9cd27ab1c18a57e97c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Attendance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AttendanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Attendance deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/awards": {
            "get": {
                "tags": [
                    "Award"
                ],
                "summary": "Get a listing of the Awards.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tawarder (Chapter, Realm, or Unit) (MorphTo): The Realm, Chapter, or Unit that Issues this Award.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances of this Award.<br>\r\n\t\t\trecommendations (Recommendation) (MorphMany): Recommendations to Issue this Award.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "a41bad5867b86ff5d9a2622dfd60aa2a",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Awards retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Award"
                ],
                "summary": "Store a newly created Award in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "3356bc31718980fb1a1b63944f2afd79",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Award"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Award saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/awards/{id}": {
            "get": {
                "tags": [
                    "Award"
                ],
                "summary": "Display the specified Award",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tawarder (Chapter, Realm, or Unit) (MorphTo): The Realm, Chapter, or Unit that Issues this Award.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances of this Award.<br>\r\n\t\t\trecommendations (Recommendation) (MorphMany): Recommendations to Issue this Award.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "3cbeffaa017a3c862d3aa9060e4e0583",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Award",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Award retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Award"
                ],
                "summary": "Update the specified Award in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "2369745cb1f57f100ff1e8be02d35f85",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Award",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Award"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Award updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Award"
                ],
                "summary": "Remove the specified Award from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "1820b8433afb92f8cd914339a96d98b8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Award",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AwardSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Award deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/images": {
            "get": {
                "tags": [
                    "Base"
                ],
                "summary": "Get a listing of the images in the public folder.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "113e8567e379aabf9d2303ef692d1582",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "path/image.ext"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Images retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendInvite": {
            "post": {
                "tags": [
                    "Base"
                ],
                "summary": "Send a Persona a registration invitation. Invite tokens are generated for Officers in the invitePersona method.  This is the only way to register a new User.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "c150f3801e830b99b7d8cff1b2009baa",
                "requestBody": {
                    "$ref": "#/components/requestBodies/sendInvite"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "yR1234D5gqZlgmiR1234YM01KDRJG1234KRHjA12"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login Successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Base"
                ],
                "summary": "Accept invitation. Invite tokens are generated for Officers in the sendInvite method. Returns auth token (as per login).",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: none",
                "operationId": "05daa2d54de69ecdd3f7052bbb25b6f6",
                "requestBody": {
                    "$ref": "#/components/requestBodies/register"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "yR1234D5gqZlgmiR1234YM01KDRJG1234KRHjA12"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login Successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Base"
                ],
                "summary": "Get auth token.  This token should be passed in the Authorization header as a bearer token with every request.  The token will expire after 20 minutes of inactivity, and a new login will be required.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "d71a75f2bffb6278e33f4933745e4d35",
                "requestBody": {
                    "$ref": "#/components/requestBodies/login"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserLogin"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login Successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "tags": [
                    "Base"
                ],
                "summary": "Delete auth token.  Prevents security leaks and informs other users they are not available.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "c9eb7775bf980846e80b4d49394adcb5",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Logout Successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/forgot": {
            "post": {
                "tags": [
                    "Base"
                ],
                "summary": "Send reset password email to user.  May only be accessed once every five minutes.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "a1e9a840278cc1b1b94a752dab3b3e2d",
                "requestBody": {
                    "$ref": "#/components/requestBodies/forgot"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "yR1234D5gqZlgmiR1234YM01KDRJG1234KRHjA12"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "A password reset link has been sent to the given email address."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reset": {
            "post": {
                "tags": [
                    "Base"
                ],
                "summary": "Change User password.  Returns auth token (as per login).",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "f433021a977d137d4e621ab6882442cb",
                "requestBody": {
                    "$ref": "#/components/requestBodies/reset"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "yR1234D5gqZlgmiR1234YM01KDRJG1234KRHjA12"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "A password reset link has been sent to the given email address."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chapters": {
            "get": {
                "tags": [
                    "Chapter"
                ],
                "summary": "Get a listing of the Chapters.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts this Chapter owns.<br>\r\n\t\t\tawards (Award) (MorphMany): Awards this Chapter can Issue.<br>\r\n\t\t\tchaptertype (Chaptertype) (BelongsTo): The level of the Chapter (Shire, etc).<br>\r\n\t\t\tevents (Event) (MorphMany): Events this Chapter has sponsored.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Awards and Titles Issued by this Chapter.<br>\r\n\t\t\tlocation (Location) (BelongsTo): The official location for the Chapter.<br>\r\n\t\t\tnearbyGuests (Guest) (HasMany): Guests at Demos that live near this Chapter.<br>\r\n\t\t\tmeetups (Meetup) (HasMany): Meetups hosted by this Chapter.<br>\r\n\t\t\tpersonas (Persona) (HasMany): Personas that claim this as their home.<br>\r\n\t\t\trealm (Realm) (BelongsTo): Realm the Chapter is associated with.<br>\r\n\t\t\treign (Reign) (MorphOne): The current Reign of the Chapter.<br>\r\n\t\t\treigns (Reign) (MorphMany): Reigns for the Chapter.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Chapter.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles the Chapter Issues.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "da22f7a78e50f13306d4e3d8ff0531ad",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chapters retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chapter"
                ],
                "summary": "Store a newly created Chapter in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "5dc98632da30e143b317c278b3dada58",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Chapter"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chapter saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/chapters/{id}": {
            "get": {
                "tags": [
                    "Chapter"
                ],
                "summary": "Display the specified Chapter",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts this Chapter owns.<br>\r\n\t\t\tawards (Award) (MorphMany): Awards this Chapter can Issue.<br>\r\n\t\t\tchaptertype (Chaptertype) (BelongsTo): The level of the Chapter (Shire, etc).<br>\r\n\t\t\tevents (Event) (MorphMany): Events this Chapter has sponsored.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Awards and Titles Issued by this Chapter.<br>\r\n\t\t\tlocation (Location) (BelongsTo): The official location for the Chapter.<br>\r\n\t\t\tnearbyGuests (Guest) (HasMany): Guests at Demos that live near this Chapter.<br>\r\n\t\t\tmeetups (Meetup) (HasMany): Meetups hosted by this Chapter.<br>\r\n\t\t\tpersonas (Persona) (HasMany): Personas that claim this as their home.<br>\r\n\t\t\trealm (Realm) (BelongsTo): Realm the Chapter is associated with.<br>\r\n\t\t\treign (Reign) (MorphOne): The current Reign of the Chapter.<br>\r\n\t\t\treigns (Reign) (MorphMany): Reigns for the Chapter.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Chapter.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles the Chapter Issues.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "6675c20e7b5a08ffdc365e49e8ae79d8",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chapter",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chapter retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chapter"
                ],
                "summary": "Update the specified Chapter in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "41156851eadfd488d35bd052682c8824",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chapter",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Chapter"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chapter updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Chapter"
                ],
                "summary": "Remove the specified Chapter from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "32e4b9ebce8a670698adc577a84726de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chapter",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChapterSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chapter deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/chaptertypes": {
            "get": {
                "tags": [
                    "Chaptertype"
                ],
                "summary": "Get a listing of the Chaptertypes.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters that share this Chaptertype.<br>\r\n\t\t\toffices (Office) (MorphMany): Offices for this Chaptertype.<br>\r\n\t\t\trealm (Realm) (BelongsTo): Realm for the Chaptertype.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "fd1a8d66946c4c03fbeab6aff03d3675",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chaptertypes retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chaptertype"
                ],
                "summary": "Store a newly created Chaptertype in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "d1bbdf219b43c983004187b0dbffea62",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Chaptertype"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chaptertype saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/chaptertypes/{id}": {
            "get": {
                "tags": [
                    "Chaptertype"
                ],
                "summary": "Display the specified Chaptertype",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters that share this Chaptertype.<br>\r\n\t\t\toffices (Office) (MorphMany): Offices for this Chaptertype.<br>\r\n\t\t\trealm (Realm) (BelongsTo): Realm for the Chaptertype.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "9384238e9384183eb74630b6bee1443e",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chaptertype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chaptertype retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chaptertype"
                ],
                "summary": "Update the specified Chaptertype in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "d2d33aa9bea46c4741a5f0f20b0f0948",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chaptertype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Chaptertype"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chaptertype updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Chaptertype"
                ],
                "summary": "Remove the specified Chaptertype from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "0970c29b63b76719e477ae1fac21e76c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Chaptertype",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ChaptertypeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Chaptertype deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/crats": {
            "get": {
                "tags": [
                    "Crat"
                ],
                "summary": "Get a listing of the Crats.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tevent (Event) (BelongsTo): Event the Persona cratted for.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona cratting the given Event.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "4971a78f03284d23d1613d1a020a2b6d",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Crats retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Crat"
                ],
                "summary": "Store a newly created Crat in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: full<br>Officers: none<br>Admins: full",
                "operationId": "4f3889eb793b00343ecf4074648c568c",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Crat"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Crat saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/crats/{id}": {
            "get": {
                "tags": [
                    "Crat"
                ],
                "summary": "Display the specified Crat",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tevent (Event) (BelongsTo): Event the Persona cratted for.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona cratting the given Event.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "cad5da31759a95b6abafaf23ca3636ad",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Crat",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Crat retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Crat"
                ],
                "summary": "Update the specified Crat in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: none<br>Admins: full",
                "operationId": "f7ad54b98d42e8398702f887ac3f933e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Crat",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Crat"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Crat updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Crat"
                ],
                "summary": "Remove the specified Crat from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: none<br>Admins: full",
                "operationId": "bbec51eb736d8beeae034a65623dcfb8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Crat",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CratSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Crat deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/dues": {
            "get": {
                "tags": [
                    "Due"
                ],
                "summary": "Get a listing of the Dues.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona paying Dues.<br>\r\n\t\t\ttransaction (Transaction) (BelongsTo): Transaction recording the payment.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "77d9f6d6f06bf2fdf062232b005334c3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Dues retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Due"
                ],
                "summary": "Store a newly created Due in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "4ade84c3be2e833fff782a6443d2c1cf",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Due"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Due saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/dues/{id}": {
            "get": {
                "tags": [
                    "Due"
                ],
                "summary": "Display the specified Due",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona paying Dues.<br>\r\n\t\t\ttransaction (Transaction) (BelongsTo): Transaction recording the payment.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "b6352616dc1702a5afebc3255f8ce27a",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Due",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Due retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Due"
                ],
                "summary": "Update the specified Due in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "a8df4c46aed705fbabb144e85b0febd3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Due",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Due"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Due updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Due"
                ],
                "summary": "Remove the specified Due from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "302cdbe173a60dafdf79bd24e0a7adaa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Due",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DueSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Due deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Get a listing of the Events.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (MorphMany): Attendances for the Event, not including demo Guests.<br>\r\n\t\t\tcrats (Crat) (HasMany): Crats for the Event.<br>\r\n\t\t\teventable (Chapter, Realm, Persona, or Unit) (MorphTo): Chapter, Realm, Persona, or Unit running the Event.<br>\r\n\t\t\tguests (Guest) (HasMany): If the Event is a demo, those who came to play with us but are not established members.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Awards and Titles Issued at the Event.<br>\r\n\t\t\tlocation (Location) (BelongsTo): Location of the Event.<br>\r\n\t\t\tsponsorable (Chapter or Realm) (MorphTo): In the case of Persona or Unit Events, Chapter or Realm sponsoring the Event.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Event.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "ced2264d3017047b4f645ed75990dff5",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Events retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Store a newly created Event in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "ee8595c7000ac495de5576085fa24948",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Event"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Event saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/events/{id}": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Display the specified Event",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (MorphMany): Attendances for the Event, not including demo Guests.<br>\r\n\t\t\tcrats (Crat) (HasMany): Crats for the Event.<br>\r\n\t\t\teventable (Chapter, Realm, Persona, or Unit) (MorphTo): Chapter, Realm, Persona, or Unit sponsoring the Event.<br>\r\n\t\t\tguests (Guest) (HasMany): If the Event is a demo, those who came to play with us but are not established members.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Awards and Titles Issued at the Event.<br>\r\n\t\t\tlocation (Location) (BelongsTo): Location of the Event.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Event.<br>\r\n\t\t\tsponsorable (Chapter or Realm) (MorphTo): In the case of Persona or Unit Events, Chapter or Realm sponsoring the Event.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "d46ba280c6dec8c616c36f5956e11276",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Event",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Event retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Update the specified Event in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "183558d8b021f045b273de9d232dc5da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Event",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Event"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Event updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event"
                ],
                "summary": "Remove the specified Event from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "096532845f55af838b6ed9645dd8b8ae",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Event",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Event deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/guests": {
            "get": {
                "tags": [
                    "Guest"
                ],
                "summary": "Get a listing of the Guests.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tevent (Event) (BelongsTo): Demo Event they played at.<br>\r\n\t\t\tchapter (Chapter) (BelongsTo): The closest Chapter to the Guest, if known.<br>\r\n\t\t\twaiver (Waiver) (BelongsTo): Waiver for the Guest.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "50dd402a6529aa7fba2b6f21a85d2d7e",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guests retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guest"
                ],
                "summary": "Store a newly created Guest in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "a45c6d19fdf82c51e9f0f2895f8f964c",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Guest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/guests/{id}": {
            "get": {
                "tags": [
                    "Guest"
                ],
                "summary": "Display the specified Guest",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tevent (Event) (BelongsTo): Demo Event they played at.<br>\r\n\t\t\tchapter (Chapter) (BelongsTo): The closest Chapter to the Guest, if known.<br>\r\n\t\t\twaiver (Waiver) (BelongsTo): Waiver for the Guest.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "07d4a0f2f3e57968feb1c8c6289cb3bf",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Guest",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guest"
                ],
                "summary": "Update the specified Guest in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "71d57c69c65e9a79224ea4b381003166",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Guest",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Guest"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guest"
                ],
                "summary": "Remove the specified Guest from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "ae20c247ae62103cb13e895c22820f1a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Guest",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/issuances": {
            "get": {
                "tags": [
                    "Issuance"
                ],
                "summary": "Get a listing of the Issuances.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tissuable (Award or Title) (MorphTo): The Issuance type; Award or Title.<br>\r\n\t\t\tissuer (Chapter, Realm, Persona, or Unit) (MorphTo): Issuing authority; Chapter, Realm, Persona, or Unit.<br>\r\n\t\t\trecipient (Persona or Unit) (MorphTo): Who recieved the Issuance; Persona or Unit.<br>\r\n\t\t\trevokedBy (User) (BelongsTo): User revoked, who authorized the revocation.<br>\r\n\t\t\tsignator (Persona) (BelongsTo): Persona signing the Issuance, if any.  Leave null when Issuer is Persona.<br>\r\n\t\t\twhereable (Event, Location, or Meetup) (MorphTo): Where it was Issued, if known; Event, Location, or Meetup.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "6426571f2062d8e5cb000c2b74cfc055",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Issuances retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Issuance"
                ],
                "summary": "Store a newly created Issuance in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "3deb590c10e23fa75e6f5655caf2be89",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Issuance"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Issuance saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/issuances/{id}": {
            "get": {
                "tags": [
                    "Issuance"
                ],
                "summary": "Display the specified Issuance",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tissuable (Award or Title) (MorphTo): The Issuance type; Award or Title.<br>\r\n\t\t\tissuer (Chapter, Realm, Persona, or Unit) (MorphTo): Issuing authority; Chapter, Realm, Persona, or Unit.<br>\r\n\t\t\trecipient (Persona or Unit) (MorphTo): Who recieved the Issuance; Persona or Unit.<br>\r\n\t\t\trevokedBy (User) (BelongsTo): User revoked, who authorized the revocation.<br>\r\n\t\t\tsignator (Persona) (BelongsTo): Persona signing the Issuance, if any.  Leave null when Issuer is Persona.<br>\r\n\t\t\twhereable (Event, Location, or Meetup) (MorphTo): Where it was Issued, if known; Event, Location, or Meetup.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "2e92c1b1022b1ced52546e6b57a3bb86",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Issuance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Issuance retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Issuance"
                ],
                "summary": "Update the specified Issuance in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "197a409656a44053f1d2a168b6f40581",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Issuance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Issuance"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Issuance updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Issuance"
                ],
                "summary": "Remove the specified Issuance from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "200dd79066d4e7b29dfa10d360ffe3fc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Issuance",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IssuanceSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Issuance deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/locations": {
            "get": {
                "tags": [
                    "Location"
                ],
                "summary": "Get a listing of the Locations.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters using this Location.<br>\r\n\t\t\tevents (Event) (HasMany): Events using this Location.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made at this Location.<br>\r\n\t\t\tmeetups (Meetup) (HasMany): Meetups using this Location.<br>\r\n\t\t\twaivers (Waiver) (HasMany): Waivers using this Location.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "4bdbf5d3d08dfb368d7e3807db5185a3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Locations retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Location"
                ],
                "summary": "Store a newly created Location in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "499353c092695cc7b7a616ba60c72539",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Location"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Location saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/locations/{id}": {
            "get": {
                "tags": [
                    "Location"
                ],
                "summary": "Display the specified Location",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters using this Location.<br>\r\n\t\t\tevents (Event) (HasMany): Events using this Location.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made at this Location.<br>\r\n\t\t\tmeetups (Meetup) (HasMany): Meetups using this Location.<br>\r\n\t\t\twaivers (Waiver) (HasMany): Waivers using this Location.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "2103c35d4716c50a7f70ce3bd5416e21",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Location",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Location retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Location"
                ],
                "summary": "Update the specified Location in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "d9a74c07d5a2b521328b8d2b189b1fd8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Location",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Location"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Location updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Location"
                ],
                "summary": "Remove the specified Location from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "e7abf997bbf00ffc6a76bf39bcbfbd4c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Location",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Location deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/meetups": {
            "get": {
                "tags": [
                    "Meetup"
                ],
                "summary": "Get a listing of the Meetups.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (MorphMany): Attendances for the Meetup.<br>\r\n\t\t\tchapter (Chapter) (BelongsTo): Chapter that sponsors the Meetup.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made at the Meetup.<br>\r\n\t\t\tlocation (Location) (BelongsTo): Location of the Meetup.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "697d569145466e5051b16b7cd948c4bf",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Meetups retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Meetup"
                ],
                "summary": "Store a newly created Meetup in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "881bb324fcd113d6e9ec2efce3186349",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Meetup"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Meetup saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/meetups/{id}": {
            "get": {
                "tags": [
                    "Meetup"
                ],
                "summary": "Display the specified Meetup",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (MorphMany): Attendances for the Meetup.<br>\r\n\t\t\tchapter (Chapter) (BelongsTo): Chapter that sponsors the Meetup.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made at the Meetup.<br>\r\n\t\t\tlocation (Location) (BelongsTo): Location of the Meetup.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "8d660e48097cf9312dc4fa96853c6dac",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Meetup",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Meetup retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Meetup"
                ],
                "summary": "Update the specified Meetup in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "5ad3fdb978421fdee89040bcd02da4ad",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Meetup",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Meetup"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Meetup updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Meetup"
                ],
                "summary": "Remove the specified Meetup from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "ac4c86da306601ffb392ea8c78b88f37",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Meetup",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MeetupSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Meetup deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/members": {
            "get": {
                "tags": [
                    "Member"
                ],
                "summary": "Get a listing of the Members.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona in the Unit.<br>\r\n\t\t\tunit (Unit) (BelongsTo): The Unit the Persona is in.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "524e1f23d5c8416cc0328f786ab2f693",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Members retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Member"
                ],
                "summary": "Store a newly created Member in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "0c0d7ea0996d9aadc7db3f0fd1302995",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Member"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Member saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/members/{id}": {
            "get": {
                "tags": [
                    "Member"
                ],
                "summary": "Display the specified Member",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona in the Unit.<br>\r\n\t\t\tunit (Unit) (BelongsTo): The Unit the Persona is in.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "b6abbdd7a18da54e89d0b16b0713bf23",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Member retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Member"
                ],
                "summary": "Update the specified Member in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "fa3aa462e403723a9925a2f4e8e65ca6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Member"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Member updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Member"
                ],
                "summary": "Remove the specified Member from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "3fb0c9df62fa82dccca5a22ce4c1528d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Member",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MemberSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Member deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/offices": {
            "get": {
                "tags": [
                    "Office"
                ],
                "summary": "Get a listing of the Offices.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tofficeable (Chaptertype, Realm, or Unit) (MorphTo): Type for what the Office is for; Chaptertype, Realm, or Unit.<br>\r\n\t\t\tofficers (Officer) (HasMany): Officers having held this Office.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "432ba0e84b04bb7620c1c26da5eb0d38",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Offices retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Office"
                ],
                "summary": "Store a newly created Office in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "cf692e9e73fca80cb28df34c424808b1",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Office"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Office saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/offices/{id}": {
            "get": {
                "tags": [
                    "Office"
                ],
                "summary": "Display the specified Office",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tofficeable (Chaptertype, Realm, or Unit) (MorphTo): Type for what the Office is for; Chaptertype, Realm, or Unit.<br>\r\n\t\t\tofficers (Officer) (HasMany): Officers having held this Office.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "da907e722ecefba99802cee3439ceb07",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Office",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Office retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Office"
                ],
                "summary": "Update the specified Office in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "07243b4ce2199fa5b16640dd21555c8b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Office",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Office"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Office updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Office"
                ],
                "summary": "Remove the specified Office from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "294fd00b9e62408facdbed37e85a33c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Office",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficeSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Office deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/officers": {
            "get": {
                "tags": [
                    "Officer"
                ],
                "summary": "Get a listing of the Officers.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\toffice (Office) (BelongsTo): Office held.<br>\r\n\t\t\tofficerable (Reign or Unit) (MorphTo): Reign or Unit the Persona is an Officer of.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona holding the given Office.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "eee1d31865b797ec8f099d515d2d857e",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Officers retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Officer"
                ],
                "summary": "Store a newly created Officer in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "7339747ead6b39910a00710f419ebb51",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Officer"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Officer saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/officers/{id}": {
            "get": {
                "tags": [
                    "Officer"
                ],
                "summary": "Display the specified Officer",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\toffice (Office) (BelongsTo): Office held.<br>\r\n\t\t\tofficerable (Reign or Unit) (MorphTo): Reign or Unit the Persona is an Officer of.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona holding the given Office.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "4fd019d201b7a140f9c52a7b88bd132b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Officer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Officer retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Officer"
                ],
                "summary": "Update the specified Officer in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "98e3630e075ac1ad465ba236838177fc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Officer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Officer"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Officer updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Officer"
                ],
                "summary": "Remove the specified Officer from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "ecf9cfb9582b95d05ac6b07f7c956a9d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Officer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfficerSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Officer deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/personas": {
            "get": {
                "tags": [
                    "Persona"
                ],
                "summary": "Get a listing of the Personas.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tattendances (Attendance) (HasMany): Attendances for the Persona.<br>\r\n\t\t\tawards (Issuance) {MorphMany): Awards received by the Persona.<br>\r\n\t\t\tchapter (Chapter) (BelongsTo): Chapter the Persona calls home.<br>\r\n\t\t\tcrats (Crat) (HasMany): Crat positions held by the Persona.<br>\r\n\t\t\tdues (Due) (HasMany): Dues paid by the Persona.<br>\r\n\t\t\tevents (Event) (MorphMany): Events sponsored by the Persona.<br>\r\n\t\t\tissuanceGivens (Issuance) {MorphMany): Issuances made by the Persona, typically retainer and squire Titles.<br>\r\n\t\t\tissuanceRevokeds (Issuance) {MorphMany): Issuances revoked by the Persona.<br>\r\n\t\t\tissuanceSigneds (Issuance) {MorphMany): Issuances signed by the Persona.<br>\r\n\t\t\tmembers (Member) (HasMany): Memberships in Units the Persona has had.<br>\r\n\t\t\tofficers (Officer) (HasMany): Officer positions held by the Persona.<br>\r\n\t\t\tpronoun (Pronoun) (BelongsTo): Prefered selected pronouns for the Persona.<br>\r\n\t\t\trecommendations (Recommendation) (HasMany): Issuance Recommendations made for this Persona.<br>\r\n\t\t\treconciliations (Reconciliation) (HasMany): Credit reconciliations for this Persona.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Persona.<br>\r\n\t\t\tsplits (Split) (HasMany): Splits this Persona took part in.<br>\r\n\t\t\tsuspensions (Suspension) (HasMany): Suspensions the Persona has undergone.<br>\r\n\t\t\tsuspensionIssueds (Suspension) (HasMany): Suspensions the Persona has issued.<br>\r\n\t\t\ttitles (Issuance) {MorphMany): Titles received by the Persona.<br>\r\n\t\t\ttitleIssuables (Title) (MorphMany): Titles the Persona can Issue.<br>\r\n\t\t\tunits (Unit) (HasManyThrough): Companies and Households the Persona is in.<br>\r\n\t\t\tuser (User) (BelongsTo): The User for the Persona.<br>\r\n\t\t\twaivers (Waiver) (HasMany): The Waivers for the Persona.<br>\r\n\t\t\twaiverVerifieds (Waiver) (HasMany): Waivers age verified by the Persona.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "871cc1b3dad20fab9eb18bb254753234",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Personas retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Persona"
                ],
                "summary": "Store a newly created Persona in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "3a5f6a0bf82681d792147e22fc387f3c",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Persona"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Persona saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/personas/{id}": {
            "get": {
                "tags": [
                    "Persona"
                ],
                "summary": "Display the specified Persona",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t        attendances (Attendance) (HasMany): Attendances for the Persona.<br>\r\n\t        awards (Issuance) {MorphMany): Awards received by the Persona.<br>\r\n\t        chapter (Chapter) (BelongsTo): Chapter the Persona calls home.<br>\r\n\t        crats (Crat) (HasMany): Crat positions held by the Persona.<br>\r\n\t        dues (Due) (HasMany): Dues paid by the Persona.<br>\r\n\t        events (Event) (MorphMany): Events sponsored by the Persona.<br>\r\n\t        issuanceGivens (Issuance) {MorphMany): Issuances made by the Persona, typically retainer and squire Titles.<br>\r\n\t        issuanceRevokeds (Issuance) {MorphMany): Issuances revoked by the Persona.<br>\r\n\t        issuanceSigneds (Issuance) {MorphMany): Issuances signed by the Persona.<br>\r\n\t        members (Member) (HasMany): Memberships in Units the Persona has had.<br>\r\n\t        officers (Officer) (HasMany): Officer positions held by the Persona.<br>\r\n\t        pronoun (Pronoun) (BelongsTo): Preferred selected pronouns for the Persona.<br>\r\n\t        recommendations (Recommendation) (HasMany): Issuance Recommendations made for this Persona.<br>\r\n\t        reconciliations (Reconciliation) (HasMany): Credit reconciliations for this Persona.<br>\r\n\t        socials (Social) (MorphMany): Socials for the Persona.<br>\r\n\t        splits (Split) (HasMany): Splits this Persona took part in.<br>\r\n\t        suspensions (Suspension) (HasMany): Suspensions the Persona has undergone.<br>\r\n\t        suspensionIssueds (Suspension) (HasMany): Suspensions the Persona has issued.<br>\r\n\t        titles (Issuance) {MorphMany): Titles received by the Persona.<br>\r\n\t        titleIssuables (Title) (MorphMany): Titles the Persona can Issue.<br>\r\n\t        units (Unit) (HasManyThrough): Companies and Households the Persona is in.<br>\r\n\t        user (User) (BelongsTo): The User for the Persona.<br>\r\n\t        waivers (Waiver) (HasMany): The Waivers for the Persona.<br>\r\n\t        waiverVerifieds (Waiver) (HasMany): Waivers age verified by the Persona.<br>\r\n\t        createdBy (User) (BelongsTo): User that created it.<br>\r\n\t        updatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t        deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "90d8456d0ffc4bbc7bcb4855290cacc3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Persona",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Persona retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Persona"
                ],
                "summary": "Update the specified Persona in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "b121f0c25b1cff41343460c05785e9fa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Persona",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Persona"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Persona updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Persona"
                ],
                "summary": "Remove the specified Persona from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "b303903d7b49afb83287c298499eba67",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Persona",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PersonaSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Persona deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/pronouns": {
            "get": {
                "tags": [
                    "Pronoun"
                ],
                "summary": "Get a listing of the Pronouns.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersonas (Persona) (HasMany): Personas using the Pronoun.<br>\r\n\t\t\twaivers (Waivers) (HasMany): Waivers using the Pronoun.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "b8d1daee59ffcaca23bc3b4c8c041613",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pronouns retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pronoun"
                ],
                "summary": "Store a newly created Pronoun in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "2b2249cef61bc79b5160640cd6859260",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pronoun"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pronoun saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/pronouns/{id}": {
            "get": {
                "tags": [
                    "Pronoun"
                ],
                "summary": "Display the specified Pronoun",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersonas (Persona) (HasMany): Personas using the Pronoun.<br>\r\n\t\t\twaivers (Waivers) (HasMany): Waivers using the Pronoun.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "1aab65e5c10c88ddeda2ad9958f9a649",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Pronoun",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pronoun retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pronoun"
                ],
                "summary": "Update the specified Pronoun in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "2c570c96673dd9832e76bd117547ce01",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Pronoun",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pronoun"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pronoun updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Pronoun"
                ],
                "summary": "Remove the specified Pronoun from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "217e55d65e27250e172057ac25bb99ad",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Pronoun",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PronounSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pronoun deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/realms": {
            "get": {
                "tags": [
                    "Realm"
                ],
                "summary": "Get a listing of the Realms.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts for the Realm.<br>\r\n\t\t\tawards (Awards) (MorphMany): Awards this Realm can issue.<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters of the Realm.<br>\r\n\t\t\tchaptertypes (Chaptertype) (HasMany): Chaptertypes the Realm uses.<br>\r\n\t\t\tevents (Event) (MorphMany): Events sponsored by the Realm.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made by the Realm.<br>\r\n\t\t\toffices (Office) (MorphMany): Offices of the Realm.<br>\r\n\t\t\treign (Reign) (MorphOne): The current Reign of the Realm.<br>\r\n\t\t\treigns (Reign) (MorphMany): Reigns of the Realm.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Realm.<br>\r\n\t\t\tsuspensions (Suspension) (HasMany): Suspensions levied by the Realm.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles the Realm Issues.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "fa41cf05b95e51bcba94fe0f0b680e0d",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Realms retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Realm"
                ],
                "summary": "Store a newly created Realm in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "da5afc57141ed8c969f2e7078cb3fff8",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Realm"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Realm saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/realms/{id}": {
            "get": {
                "tags": [
                    "Realm"
                ],
                "summary": "Display the specified Realm",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts for the Realm.<br>\r\n\t\t\tawards (Awards) (MorphMany): Awards this Realm can issue.<br>\r\n\t\t\tchapters (Chapter) (HasMany): Chapters of the Realm.<br>\r\n\t\t\tchaptertypes (Chaptertype) (HasMany): Chaptertypes the Realm uses.<br>\r\n\t\t\tevents (Event) (MorphMany): Events sponsored by the Realm.<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances made by the Realm.<br>\r\n\t\t\toffices (Office) (MorphMany): Offices of the Realm.<br>\r\n\t\t\treign (Reign) (MorphOne): The current Reign of the Realm.<br>\r\n\t\t\treigns (Reign) (MorphMany): Reigns of the Realm.<br>\r\n\t\t\tsocials (Social) (MorphMany): Socials for the Realm.<br>\r\n\t\t\tsuspensions (Suspension) (HasMany): Suspensions levied by the Realm.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles the Realm Issues.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "e577a1baedc8d1bf52c45535926e1d40",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Realm",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Realm retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Realm"
                ],
                "summary": "Update the specified Realm in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "00d2f07a041d1fd68e294e97ae949a88",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Realm",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Realm"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Realm updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Realm"
                ],
                "summary": "Remove the specified Realm from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "1dd1f1d8f608077ed4da974c8732aa71",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Realm",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RealmSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Realm deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/recommendations": {
            "get": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Get a listing of the Recommendations.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona the Recommendation is for.<br>\r\n\t\t\trecommendable (Award or Title) (MorphTo): The Type of Issuances being Recommended; Award or Title.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "7ba4da845868c542ce3b9532da234e59",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Recommendations retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Store a newly created Recommendation in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "25dee38fd9c6e1b31d690d298b307a04",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Recommendation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Recommendation saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/recommendations/{id}": {
            "get": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Display the specified Recommendation",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona the Recommendation is for.<br>\r\n\t\t\trecommendable (Award or Title) (MorphTo): The Type of Issuances being Recommended; Award or Title.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "82e69796418c09bc44ad35e44d984fb6",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Recommendation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Recommendation retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Update the specified Recommendation in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "76f69e019fb4e6b38a71355496d2b66a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Recommendation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Recommendation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Recommendation updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Remove the specified Recommendation from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "47ced06e39272d3b1438948764e62757",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Recommendation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RecommendationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Recommendation deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/reconciliations": {
            "get": {
                "tags": [
                    "Reconciliation"
                ],
                "summary": "Get a listing of the Reconciliations.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tarchetype (Archetype) (BelongsTo): Archetype credits being Reconciled.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona credits being Reconciled.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "af5f84d5d7982fca02c560694aae9ee7",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reconciliations retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reconciliation"
                ],
                "summary": "Store a newly created Reconciliation in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "f44bf99f99aed083c7245ba35390862e",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Reconciliation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reconciliation saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/reconciliations/{id}": {
            "get": {
                "tags": [
                    "Reconciliation"
                ],
                "summary": "Display the specified Reconciliation",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tarchetype (Archetype) (BelongsTo): Archetype credits being Reconciled.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona credits being Reconciled.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "7871f1cd4947aa3247911ed1839fc684",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reconciliation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reconciliation retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reconciliation"
                ],
                "summary": "Update the specified Reconciliation in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "c938af0c48ec4a78de6b6ef249264a7c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reconciliation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Reconciliation"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reconciliation updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reconciliation"
                ],
                "summary": "Remove the specified Reconciliation from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "76c82bdf3d4521854a303a5c07c1a7a3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reconciliation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReconciliationSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reconciliation deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/reigns": {
            "get": {
                "tags": [
                    "Reign"
                ],
                "summary": "Get a listing of the Reigns.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tofficers (Officer) (MorphMany): Officers of the Reign.<br>\r\n\t\t\treignable (Chapter or Realm) (MorphTo): The Reign type; Realm or Chapter.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "bc14495b4057aa087e13e1d7517d0216",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reigns retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reign"
                ],
                "summary": "Store a newly created Reign in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "a07ea431d55417794db0989e7b9a7332",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Reign"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reign saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/reigns/{id}": {
            "get": {
                "tags": [
                    "Reign"
                ],
                "summary": "Display the specified Reign",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tofficers (Officer) (MorphMany): Officers of the Reign.<br>\r\n\t\t\treignable (Chapter or Realm) (MorphTo): The Reign type; Realm or Chapter.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "f71d78debf2113c070e653876946328e",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reign",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reign retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reign"
                ],
                "summary": "Update the specified Reign in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "0a677043700bec595dde529165e0fb06",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reign",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Reign"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reign updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reign"
                ],
                "summary": "Remove the specified Reign from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "d82cda77ad5455b4bb6c4e5a1162cbbb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Reign",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReignSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reign deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/socials": {
            "get": {
                "tags": [
                    "Social"
                ],
                "summary": "Get a listing of the Socials.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tsociable (Social) (MorphTo): Model the Social is being attached to.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "7330fdb41b392e2c2e5b53f47d21cb3c",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Socials retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Social"
                ],
                "summary": "Store a newly created Social in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "9fd03a075c9d5ef1c27cb61bee208718",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Social"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Social saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/socials/{id}": {
            "get": {
                "tags": [
                    "Social"
                ],
                "summary": "Display the specified Social",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tsociable (Social) (MorphTo): Model the Social is being attached to.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "2e501a51e18e624a94f9674a3cf7f7c1",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Social",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Social retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Social"
                ],
                "summary": "Update the specified Social in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "0afffe0b3083dd8eaeda4ef63f3a57d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Social",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Social"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Social updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Social"
                ],
                "summary": "Remove the specified Social from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "a38af0204131ad05d9524531593a3efc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Social",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SocialSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Social deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/splits": {
            "get": {
                "tags": [
                    "Split"
                ],
                "summary": "Get a listing of the Splits.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccount (Account) (BelongsTo): Account this Split is for.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona performing the Transaction this Split is for.<br>\r\n\t\t\ttransaction (Transaction) (BelongsTo): Transaction being Split.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "64c2683171f8895c3e67badba52f435d",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Splits retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Split"
                ],
                "summary": "Store a newly created Split in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "ef978af74b725c81276a9053d52634e7",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Split"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Split saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/splits/{id}": {
            "get": {
                "tags": [
                    "Split"
                ],
                "summary": "Display the specified Split",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: related<br>Officers: related<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccount (Account) (BelongsTo): Account this Split is for.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona performing the Transaction this Split is for.<br>\r\n\t\t\ttransaction (Transaction) (BelongsTo): Transaction being Split.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "b8cb239462eda62d36e9641c4ac7c707",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Split",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Split retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Split"
                ],
                "summary": "Update the specified Split in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "207d972e79d49775740e3170a61faac2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Split",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Split"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Split updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Split"
                ],
                "summary": "Remove the specified Split from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "597fa4e041e990205a23528d4259314f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Split",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SplitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Split deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/suspensions": {
            "get": {
                "tags": [
                    "Suspension"
                ],
                "summary": "Get a listing of the Suspensions.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona that has been Suspended.<br>\r\n\t\t\trealm (Realm) (BelongsTo): The Realm issuing the Suspension.<br>\r\n\t\t\tsuspendedBy (User) (BelongsTo): User Persona issuing the Suspension.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "78150bdc07316738b2df5c80e8f27f87",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Suspensions retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Suspension"
                ],
                "summary": "Store a newly created Suspension in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "9cfb349c39326941d95bbf2104c9d978",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Suspension"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Suspension saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/suspensions/{id}": {
            "get": {
                "tags": [
                    "Suspension"
                ],
                "summary": "Display the specified Suspension",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): The Persona that has been Suspended.<br>\r\n\t\t\trealm (Realm) (BelongsTo): The Realm issuing the Suspension.<br>\r\n\t\t\tsuspendedBy (User) (BelongsTo): User Persona issuing the Suspension.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "a396f0cb79fdbd0f72bd7b75c068bfc9",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Suspension",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Suspension retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Suspension"
                ],
                "summary": "Update the specified Suspension in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "4a3c737360215624810c56656bc7cbab",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Suspension",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Suspension"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Suspension updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Suspension"
                ],
                "summary": "Remove the specified Suspension from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "5b93ddef9f01cb5d5ef1382d4ff9fe3f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Suspension",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SuspensionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Suspension deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/titles": {
            "get": {
                "tags": [
                    "Title"
                ],
                "summary": "Get a listing of the Titles.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances of this Title.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "6fdafbb1d780a672a5784422f313e1e3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Titles retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Title"
                ],
                "summary": "Store a newly created Title in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "0a37bdd574da963931e5935c6f2b4c54",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Title"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Title saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/titles/{id}": {
            "get": {
                "tags": [
                    "Title"
                ],
                "summary": "Display the specified Title",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tissuances (Issuance) (MorphMany): Issuances of this Title.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "4ef132dd2b627649dc8bb507829d6667",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Title",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Title retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Title"
                ],
                "summary": "Update the specified Title in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "659894e989866f266fa1aaa88282ba79",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Title",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Title"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Title updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Title"
                ],
                "summary": "Remove the specified Title from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "a14cc6721d6470f636f1d731192ede72",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Title",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TitleSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Title deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/tournaments": {
            "get": {
                "tags": [
                    "Tournament"
                ],
                "summary": "Get a listing of the Tournaments.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\ttournamentable (Chapter, Event, or Realm) (MorphTo): The Tournament sponsor type; Chapter, Event, or Realm.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "f84dab1842f560f09e29fb1473d74efa",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tournaments retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tournament"
                ],
                "summary": "Store a newly created Tournament in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "441a93614ff459dba8c2393d5204388f",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Tournament"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tournament saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/tournaments/{id}": {
            "get": {
                "tags": [
                    "Tournament"
                ],
                "summary": "Display the specified Tournament",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\ttournamentable (Chapter, Event, or Realm) (MorphTo): The Tournament sponsor type; Chapter, Event, or Realm.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "73081006f3208d0618a43acf7e470c5e",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Tournament",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tournament retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tournament"
                ],
                "summary": "Update the specified Tournament in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "d93b563870f1493067829c292ac65894",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Tournament",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Tournament"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tournament updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tournament"
                ],
                "summary": "Remove the specified Tournament from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "719d4100bd77216a1e8aa45654b50f40",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Tournament",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TournamentSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tournament deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/transactions": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get a listing of the Transactions.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tdues (Due) (HasMany): Dues linked to the Transaction\r\n\t * \t\tsplits (Split) (HasMany): Splits for the Transaction\r\n\t * \t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "3fd1f8d3c6601e0ffd07e6b6cbcff9cf",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Transactions retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Store a newly created Transaction in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: full<br>Crats: none<br>Officers: full<br>Admins: full",
                "operationId": "0f290b58c6bab4729d0dde1a1d51bff3",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Transaction"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Transaction saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/transactions/{id}": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Display the specified Transaction",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tdues (Due) (HasMany): Dues linked to the Transaction\r\n\t * \t\tsplits (Split) (HasMany): Splits for the Transaction\r\n\t * \t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "adef18e3ac1ce974513830381518cf5f",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Transaction",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Transaction retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Update the specified Transaction in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "8e8c50149ec8ad953aa07b004cbc7fd8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Transaction",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Transaction"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Transaction updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Remove the specified Transaction from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "975bc05349a883fc69d5602fbfb9099b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Transaction",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Transaction deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/units": {
            "get": {
                "tags": [
                    "Unit"
                ],
                "summary": "Get a listing of the Units.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts held by the Unit.<br>\r\n\t\t\tawards (Award) (MorphMany): Awards Unit can Issue.<br>\r\n\t\t\tawardIssuances (Issuance) (MorphMany): Awards Unit has been Issued.<br>\r\n\t\t\tevents (Event) (MorphMany): Events run by this Unit.<br>\r\n\t\t\tissuanceGivens (Issuance) (MorphMany): All Issuances made by the Unit.<br>\r\n\t\t\tissuanceReceived (Issuance) (MorphMany): All Issuances received by the Unit.<br>\r\n\t\t\tmembers (Member) (HasMany): Unit Members.<br>\r\n\t\t\tofficers (Officer) (MorphMany): Officers of the Unit.<br>\r\n\t\t\toffices (Office) (MorphMany): Unit Offices.<br>\r\n\t\t\tsocials (Social) (MorphMany): Social media links or IDs.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles Unit can Issue.<br>\r\n\t\t\ttitleIssuances (Issuance) (MorphMany): Titles Unit has been Issued.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "1397445b0aabd921f5b9fa886f6ad780",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Units retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Unit"
                ],
                "summary": "Store a newly created Unit in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "f5a228c20d33b5375ccb5a92efdf9686",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Unit"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unit saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/units/{id}": {
            "get": {
                "tags": [
                    "Unit"
                ],
                "summary": "Display the specified Unit",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\taccounts (Account) (MorphMany): Accounts held by the Unit.<br>\r\n\t\t\tawards (Award) (MorphMany): Awards Unit can Issue.<br>\r\n\t\t\tawardIssuances (Issuance) (MorphMany): Awards Unit has been Issued.<br>\r\n\t\t\tevents (Event) (MorphMany): Events run by this Unit.<br>\r\n\t\t\tissuanceGivens (Issuance) (MorphMany): All Issuances made by the Unit.<br>\r\n\t\t\tissuanceReceived (Issuance) (MorphMany): All Issuances received by the Unit.<br>\r\n\t\t\tmembers (Member) (HasMany): Unit Members.<br>\r\n\t\t\tofficers (Officer) (MorphMany): Officers of the Unit.<br>\r\n\t\t\toffices (Office) (MorphMany): Unit Offices.<br>\r\n\t\t\tsocials (Social) (MorphMany): Social media links or IDs.<br>\r\n\t\t\ttitles (Title) (MorphMany): Titles Unit can Issue.<br>\r\n\t\t\ttitleIssuances (Issuance) (MorphMany): Titles Unit has been Issued.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "f187f0319df2138e4b948de2d5404b21",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Unit",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unit retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Unit"
                ],
                "summary": "Update the specified Unit in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: related<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "b6cd0ccd4daa136841d1a51b77063402",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Unit",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Unit"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unit updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Unit"
                ],
                "summary": "Remove the specified Unit from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "cef2675f6bb362d0ccb3418ac71e38d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Unit",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UnitSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unit deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a listing of the Users.",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona associated with the User.<br>\r\n\t\t\tpasswordHistories (PasswordHistory) (HasMany): Past passwords (encrypted) this User has used.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "1df092f5eddb2e29c3c5aa8043dd6d44",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Users retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Store a newly created User in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: none<br>Admins: full",
                "operationId": "3465c05467f56755d8fde6dfe336f784",
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Display the specified User",
                "description": "<b>Access</b>:<br>Visitors: full<br>Users: full<br>Unit Officers: full<br>Crats: full<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona associated with the User.<br>\r\n\t\t\tpasswordHistories (PasswordHistory) (HasMany): Past passwords (encrypted) this User has used.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "ca775ff26d0144e4b01abbd8c926f7c3",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of User",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Update the specified User in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "92043c1137b37a84944b0d9a7f0ea5e8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of User",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the specified User from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: none<br>Crats: none<br>Officers: related<br>Admins: full",
                "operationId": "b3671c968c691df9358298f3a285c767",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of User",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/waivers": {
            "get": {
                "tags": [
                    "Waiver"
                ],
                "summary": "Get a listing of the Waivers.",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: none<br>Officers: full<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tageVerifiedBy (User) (BelongsTo): User Persona that verified the Waiver signer age, if it has been.<br>\r\n\t\t\tguests (Guest) (BelongsTo): The Guest this Waiver is for, if any.<br>\r\n\t\t\tlocation (Location) (BelongsTo): The Waiver address fields values.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona this Waiver is for, if any.<br>\r\n\t\t\tpronoun (Pronoun) (BelongsTo): Pronoun for the individual being Waivered, if known.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "ffdecfbce492c5ed40fe3ca27e65f1e4",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/search"
                    },
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/skip"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Waivers retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/QueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Waiver"
                ],
                "summary": "Store a newly created Waiver in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: full<br>Unit Officers: none<br>Crats: full<br>Officers: full<br>Admins: full",
                "operationId": "745bc06932189ca0bb03f99077573a93",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Waiver"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Waiver saved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/waivers/{id}": {
            "get": {
                "tags": [
                    "Waiver"
                ],
                "summary": "Display the specified Waiver",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: own<br>Unit Officers: none<br>Crats: related<br>Officers: related<br>Admins: full<br>The following relationships can be attached, and in the case of plural relations, searched:<br>\r\n\t\t\tageVerifiedBy (User) (BelongsTo): User Persona that verified the Waiver signer age, if it has been.<br>\r\n\t\t\tguests (Guest) (BelongsTo): The Guest this Waiver is for, if any.<br>\r\n\t\t\tlocation (Location) (BelongsTo): The Waiver address fields values.<br>\r\n\t\t\tpersona (Persona) (BelongsTo): Persona this Waiver is for, if any.<br>\r\n\t\t\tpronoun (Pronoun) (BelongsTo): Pronoun for the individual being Waivered, if known.<br>\r\n\t\t\tcreatedBy (User) (BelongsTo): User that created it.<br>\r\n\t\t\tupdatedBy (User) (BelongsTo): User that last updated it (if any).<br>\r\n\t\t\tdeletedBy (User) (BelongsTo): User that deleted it (if any).",
                "operationId": "5d4edc7532bf8d696d77aadbd99e5baf",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/columns"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Waiver",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Waiver retrieved successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SimpleQueryParameters"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Waiver"
                ],
                "summary": "Update the specified Waiver in storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "0e0d2096dfa43f3d85cfff879a368015",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Waiver",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    },
                    {
                        "name": "_method",
                        "in": "query",
                        "description": "This is a patch for swagger-ui, to send form data.  If you're sending json content, and using PUT method, it's not really required.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Put"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Waiver"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Waiver updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSuperSimple"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Waiver"
                ],
                "summary": "Remove the specified Waiver from storage",
                "description": "<b>Access</b>:<br>Visitors: none<br>Users: none<br>Unit Officers: none<br>Crats: related<br>Officers: related<br>Admins: full",
                "operationId": "6ce0494f95cd6590cf194fbca9d1ebc7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of Waiver",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 42
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "true"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WaiverSimple"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Waiver deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Exception"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The entry's ID.",
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "example": 42
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "default": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "QueryParameters": {
                "properties": {
                    "search[]": {
                        "type": "object",
                        "example": {
                            "id": "42"
                        }
                    },
                    "columns[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "snake_case",
                            "example": "id"
                        },
                        "uniqueItems": true
                    },
                    "with[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "dotNotation",
                            "example": "createdBy.persona"
                        },
                        "uniqueItems": true
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "example": 5
                    },
                    "skip": {
                        "type": "integer",
                        "format": "int32",
                        "example": 5
                    },
                    "sort[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "snake_case",
                            "example": "id"
                        },
                        "uniqueItems": true
                    },
                    "direction": {
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "example": "asc"
                    }
                },
                "type": "object"
            },
            "SimpleQueryParameters": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32",
                        "example": 42
                    },
                    "columns[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "snake_case",
                            "example": "id"
                        },
                        "uniqueItems": true
                    },
                    "with[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "dotNotation",
                            "example": "createdBy.persona"
                        },
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "Account": {
                "description": "Financial Accounts for Realms, Chapters, and Units<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * accountable (Realm, Chapter, or Unit) (MorphTo): Realm, Chapter, or Unit that owns this Account.\r\n * parent (Account) (BelongsTo): Parent Account, if any.\r\n * splits (Split) (HasMany): Splits for this Account.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "accountable_type",
                    "accountable_id",
                    "name",
                    "type"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "The superior Account ID, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "accountable_type": {
                        "description": "Who owns the account; Realm, Chapter, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "accountable_id": {
                        "description": "The ID of the owner of this Account.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "Account label.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Dues",
                        "nullable": false
                    },
                    "type": {
                        "description": "The type of Account this is; Imbalance, Income, Expense, Asset, Liability, or Equity",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Imbalance",
                            "Income",
                            "Expense",
                            "Asset",
                            "Liability",
                            "Equity"
                        ],
                        "readOnly": false,
                        "example": "Imbalance",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/AccountSimple"
                    },
                    "splits": {
                        "description": "Attachable & filterable array of Splits for this Account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SplitSimple"
                        },
                        "readOnly": true
                    },
                    "accountable": {
                        "description": "Attachable object that owns the Account.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "AccountSimple": {
                "title": "AccountSimple",
                "description": "Attachable Account object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "The superior Account ID, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "accountable_type": {
                        "description": "Who owns the account; Realm, Chapter, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "accountable_id": {
                        "description": "The ID of the owner of this Account.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "Account label.",
                        "type": "string",
                        "maxLength": 50,
                        "readOnly": false,
                        "nullable": false
                    },
                    "type": {
                        "description": "The type of Account this is; Imbalance, Income, Expense, Asset, Liability, or Equity",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Imbalance",
                            "Income",
                            "Expense",
                            "Asset",
                            "Liability",
                            "Equity"
                        ],
                        "readOnly": false,
                        "example": "Imbalance",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "AccountSuperSimple": {
                "title": "AccountSuperSimpleSimple",
                "description": "Attachable Account object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "The superior Account ID, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "accountable_type": {
                        "description": "Who owns the account; Realm, Chapter, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "accountable_id": {
                        "description": "The ID of the owner of this Account.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "Account label.",
                        "type": "string",
                        "maxLength": 50,
                        "readOnly": false,
                        "nullable": false
                    },
                    "type": {
                        "description": "The type of Account this is; Imbalance, Income, Expense, Asset, Liability, or Equity",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Imbalance",
                            "Income",
                            "Expense",
                            "Asset",
                            "Liability",
                            "Equity"
                        ],
                        "readOnly": false,
                        "example": "Imbalance",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Archetype": {
                "description": "Archetypes (Classes) one could take credits in.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * attendances (Attendance) (HasMany): Attendances with this Archetype.\r\n * reconciliations (Reconciliation) (HasMany): Reconciliations with this Archetype.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "name",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "name": {
                        "description": "Archetype label.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Barbarian",
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is it (default true) a current option?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "attendances": {
                        "description": "Attachable & filterable array of Attendances with this Archetype.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttendanceSimple"
                        },
                        "readOnly": true
                    },
                    "reconciliations": {
                        "description": "Attachable & filterable array of Reconciliations with this Archetype.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReconciliationSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "ArchetypeSimple": {
                "title": "ArchetypeSimple",
                "description": "Attachable Archetype object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "name": {
                        "description": "Archetype label.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Barbarian",
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is it (default true) a current option?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "ArchetypeSuperSimple": {
                "title": "ArchetypeSuperSimpleSimple",
                "description": "Attachable Archetype object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "name": {
                        "description": "Archetype label.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Barbarian",
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is it (default true) a current option?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Attendance": {
                "description": "Records of Attendance at an Event or Meetup.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * attendable (Event or Meetup) (MorphTo): Event or Meetup the Attendance is for.\r\n * archetype (Archetype) (BelongsTo): Selected Archetype for the Attendance.\r\n * persona (Persona) (BelongsTo): Selected Persona receiveing the Attendance credit.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "persona_id",
                    "attendable_type",
                    "attendable_id",
                    "attended_at",
                    "credits"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "Attendee Persona ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "archetype_id": {
                        "description": "ID of the selected Archetype for the Attendance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attendable_type": {
                        "description": "Where the Attendance occured; Meetup or Event",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Meetup",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Meetup",
                        "nullable": false
                    },
                    "attendable_id": {
                        "description": "The ID of where the Attendance occured.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attended_at": {
                        "description": "The date of the Attendance.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "credits": {
                        "description": "Credits (default 1) awarded for the Attendance",
                        "type": "number",
                        "format": "float",
                        "default": 1,
                        "readOnly": false,
                        "example": 1,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "attendable": {
                        "description": "Attachable object that was attended.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/MeetupSimple"
                            },
                            {
                                "$ref": "#/components/schemas/EventSimple"
                            }
                        ]
                    },
                    "archetype": {
                        "$ref": "#/components/schemas/ArchetypeSimple"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "AttendanceSimple": {
                "title": "AttendanceSimple",
                "description": "Attachable Attendance object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "Attendee Persona ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "archetype_id": {
                        "description": "ID of the selected Archetype for the Attendance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attendable_type": {
                        "description": "Where the Attendance occured; Meetup or Event",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Meetup",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Meetup",
                        "nullable": false
                    },
                    "attendable_id": {
                        "description": "The ID of where the Attendance occured.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attended_at": {
                        "description": "The date of the Attendance.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "credits": {
                        "description": "Credits (default 1) awarded for the Attendance",
                        "type": "number",
                        "format": "float",
                        "default": 1,
                        "readOnly": false,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "AttendanceSuperSimple": {
                "title": "AttendanceSuperSimpleSimple",
                "description": "Attachable Attendance object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "Attendee Persona ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "archetype_id": {
                        "description": "ID of the selected Archetype for the Attendance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attendable_type": {
                        "description": "Where the Attendance occured; Meetup or Event",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Meetup",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Meetup",
                        "nullable": false
                    },
                    "attendable_id": {
                        "description": "The ID of where the Attendance occured.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "attended_at": {
                        "description": "The date of the Attendance.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "credits": {
                        "description": "Credits (default 1) awarded for the Attendance",
                        "type": "number",
                        "format": "float",
                        "default": 1,
                        "readOnly": false,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Award": {
                "description": "Awards available in a given (or all) Realm(s), Chapter, or Unit.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * awarder (Chapter, Realm, or Unit) (MorphTo): The Realm, Chapter, or Unit that Issues this Award.\r\n * issuances (Issuance) (MorphMany): Issuances of this Award.\r\n * recommendations (Recommendation) (MorphMany): Recommendations to Issue this Award.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "awarder_type",
                    "name",
                    "is_ladder"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "awarder_type": {
                        "description": "Who issues the Award; Realm, Chapter, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "awarder_id": {
                        "description": "The ID of the award issuer, null for all.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The Award label, with options for the label seperated with |.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Order of the Rose",
                        "nullable": false
                    },
                    "is_ladder": {
                        "description": "Is this (default false) a ranked/ladder award?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "awarder": {
                        "description": "Attachable object that Issues the Award.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances of this Award.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "recommendations": {
                        "description": "Attachable & filterable array of Recommendations to Issue this Award.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecommendationSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "AwardSimple": {
                "title": "AwardSimple",
                "description": "Attachable Award object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "awarder_type": {
                        "description": "Who issues the Award; Realm, Chapter, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "awarder_id": {
                        "description": "The ID of the award issuer, null for all.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The Award label, with options for the label seperated with |.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Order of the Rose",
                        "nullable": false
                    },
                    "is_ladder": {
                        "description": "Is this (default false) a ranked/ladder award?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "AwardSuperSimple": {
                "title": "AwardSuperSimpleSimple",
                "description": "Attachable Award object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "awarder_type": {
                        "description": "Who issues the Award; Realm, Chapter, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "awarder_id": {
                        "description": "The ID of the award issuer, null for all.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The Award label, with options for the label seperated with |.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Order of the Rose",
                        "nullable": false
                    },
                    "is_ladder": {
                        "description": "Is this (default false) a ranked/ladder award?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Chapter": {
                "description": "Amtgard Chapters<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * accounts (Account) (MorphMany): Accounts this Chapter owns.\r\n * awards (Award) (MorphMany): Awards this Chapter can Issue.\r\n * chaptertype (Chaptertype) (BelongsTo): The level of the Chapter (Shire, etc).\r\n * events (Event) (MorphMany): Events this Chapter has run.\r\n * issuances (Issuance) (MorphMany): Awards and Titles Issued by this Chapter.\r\n * location (Location) (BelongsTo): The official location for the Chapter.\r\n * nearbyGuests (Guest) (HasMany): Guests at Demos that live near this Chapter.\r\n * meetups (Meetup) (HasMany): Meetups hosted by this Chapter.\r\n * personas (Persona) (HasMany): Personas that claim this as their home.\r\n * realm (Realm) (BelongsTo): Realm the Chapter is associated with.\r\n * reign (Reign) (MorphOne): The current Reign for the Chapter.\r\n * reigns (Reign) (MorphMany): Reigns for the Chapter.\r\n * socials (Social) (MorphMany): Socials for the Chapter.\r\n * sponsors (Event) (MorphMany): Persona or Unit Events this Chapter has sponsored.\r\n * suspensions (Suspension) (MorphMany): Suspensions levied by the Chapter.\r\n * titles (Title) (MorphMany): Titles the Chapter Issues.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "realm_id",
                    "chaptertype_id",
                    "location_id",
                    "name",
                    "abbreviation",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm sponsoring the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chaptertype_id": {
                        "description": "The ID of the Chaptertype earned by the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location that best describes where the Chapter is.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Adjective Geography",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A short abbreviation of the Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 3,
                        "readOnly": false,
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Chapter heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/chapters/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Chapter (default true) still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "accounts": {
                        "description": "Attachable & filterable array of Accounts this Chapter owns.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountSimple"
                        },
                        "readOnly": true
                    },
                    "awards": {
                        "description": "Attachable & filterable array of Awards this Chapter can Issue.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AwardSimple"
                        },
                        "readOnly": true
                    },
                    "chaptertype": {
                        "$ref": "#/components/schemas/ChaptertypeSimple"
                    },
                    "events": {
                        "description": "Attachable & filterable array of Events this Chapter has run.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances this Chapter has made.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "location": {
                        "$ref": "#/components/schemas/LocationSimple"
                    },
                    "meetups": {
                        "description": "Attachable & filterable array of Meetups for this Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MeetupSimple"
                        },
                        "readOnly": true
                    },
                    "nearbyGuests": {
                        "description": "Attachable & filterable array of Demo Guests that live near the Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GuestSimple"
                        },
                        "readOnly": true
                    },
                    "personas": {
                        "description": "Attachable & filterable array of Personas for this Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonaSimple"
                        },
                        "readOnly": true
                    },
                    "realm": {
                        "$ref": "#/components/schemas/RealmSimple"
                    },
                    "reign": {
                        "description": "Attachable & filterable array of the current Reign for the Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReignSimple"
                        },
                        "readOnly": true
                    },
                    "reigns": {
                        "description": "Attachable & filterable array of the Reigns of the Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReignSimple"
                        },
                        "readOnly": true
                    },
                    "socials": {
                        "description": "Attachable & filterable array of the Socials of the Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SocialSimple"
                        },
                        "readOnly": true
                    },
                    "sponsors": {
                        "description": "Attachable & filterable array of Persona or Unit Events this Chapter has sponsored.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "suspensions": {
                        "description": "Attachable & filterable array of Suspensions levied by the Chapter.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuspensionSimple"
                        },
                        "readOnly": true
                    },
                    "titles": {
                        "description": "Attachable & filterable array of the Titles the Chapter Issues.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TitleSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "ChapterSimple": {
                "title": "ChapterSimple",
                "description": "Attachable Chapter object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm sponsoring the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chaptertype_id": {
                        "description": "The ID of the Chaptertype earned by the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location that best describes where the Chapter is.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Adjective Geography",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A short abbreviation of the Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 3,
                        "readOnly": false,
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Chapter heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "/images/heraldry/chapters/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Chapter (default true) still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "ChapterSuperSimple": {
                "title": "ChapterSuperSimpleSimple",
                "description": "Attachable Chapter object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm sponsoring the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chaptertype_id": {
                        "description": "The ID of the Chaptertype earned by the Chapter.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location that best describes where the Chapter is.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Adjective Geography",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A short abbreviation of the Chapter name, unique to the Realm.",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 3,
                        "readOnly": false,
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Chapter heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "/images/heraldry/chapters/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Chapter (default true) still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Chaptertype": {
                "description": "Levels available for Chapters by Realm<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * chapters (Chapter) (HasMany): Chapters that share this Chaptertype.\r\n * offices (Office) (MorphMany): Offices for this Chaptertype.\r\n * realm (Realm) (BelongsTo): Realm for the Chaptertype.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "realm_id",
                    "name",
                    "minimumattendance",
                    "minimumcutoff"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm that has this Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Chaptertype",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Shire",
                        "nullable": false
                    },
                    "rank": {
                        "description": "The order rank of the Chaptertype expressed in multiples of 10 where Shire is 20.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 20,
                        "nullable": true
                    },
                    "minimumattendance": {
                        "description": "Minimum (default 5) average Attendance required by the Realm to achieve the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 5,
                        "readOnly": false,
                        "example": 5,
                        "nullable": false
                    },
                    "minimumcutoff": {
                        "description": "Minimum (default 1) average Attendance required by the Realm to maintain the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "chapters": {
                        "description": "Attachable & filterable array of Chapters with this Chaptertype.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChapterSimple"
                        },
                        "readOnly": true
                    },
                    "offices": {
                        "description": "Attachable & filterable array of Offices for this Chaptertype.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficeSimple"
                        },
                        "readOnly": true
                    },
                    "realm": {
                        "$ref": "#/components/schemas/RealmSimple"
                    }
                },
                "type": "object"
            },
            "ChaptertypeSimple": {
                "title": "ChaptertypeSimple",
                "description": "Attachable Chaptertype object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm that has this Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Chaptertype",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Shire",
                        "nullable": false
                    },
                    "rank": {
                        "description": "The order rank of the Chaptertype expressed in multiples of 10 where Shire is 20.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 20,
                        "nullable": true
                    },
                    "minimumattendance": {
                        "description": "Minimum (default 5) average Attendance required by the Realm to achieve the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 5,
                        "readOnly": false,
                        "example": 5,
                        "nullable": false
                    },
                    "minimumcutoff": {
                        "description": "Minimum (default 1) average Attendance required by the Realm to maintain the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "ChaptertypeSuperSimple": {
                "title": "ChaptertypeSuperSimpleSimple",
                "description": "Attachable Chaptertype object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "realm_id": {
                        "description": "The ID of the Realm that has this Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Chaptertype",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Shire",
                        "nullable": false
                    },
                    "rank": {
                        "description": "The order rank of the Chaptertype expressed in multiples of 10 where Shire is 20.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 20,
                        "nullable": true
                    },
                    "minimumattendance": {
                        "description": "Minimum (default 5) average Attendance required by the Realm to achieve the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 5,
                        "readOnly": false,
                        "example": 5,
                        "nullable": false
                    },
                    "minimumcutoff": {
                        "description": "Minimum (default 1) average Attendance required by the Realm to maintain the Chaptertype.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Crat": {
                "description": "Those running things at Events.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * event (Event) (BelongsTo): Event the Persona cratted for.\r\n * persona (Persona) (BelongsTo): The Persona cratting the given Event.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "event_id",
                    "persona_id",
                    "role",
                    "is_autocrat"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "Event the Persona cratted for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The Persona cratting the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The role of the Crat.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "FeastOCrat",
                        "nullable": false
                    },
                    "is_autocrat": {
                        "description": "Are they (default false) the person in charge?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "event": {
                        "$ref": "#/components/schemas/EventSimple"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "CratSimple": {
                "title": "CratSimple",
                "description": "Attachable Crat object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "Event the Persona cratted for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The Persona cratting the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The role of the Crat.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "FeastOCrat",
                        "nullable": false
                    },
                    "is_autocrat": {
                        "description": "Are they (default false) the person in charge?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "CratSuperSimple": {
                "title": "CratSuperSimpleSimple",
                "description": "Attachable Crat object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "Event the Persona cratted for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The Persona cratting the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The role of the Crat.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "FeastOCrat",
                        "nullable": false
                    },
                    "is_autocrat": {
                        "description": "Are they (default false) the person in charge?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Due": {
                "description": "Membership Dues.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * persona (Persona) (BelongsTo): Persona paying Dues.\r\n * transaction (Transaction) (BelongsTo): Transaction recording the payment.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "persona_id",
                    "transaction_id",
                    "dues_on"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "ID of the Persona paying Dues.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "ID of the Transaction recording the payment.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "dues_on": {
                        "description": "The date the dues period begins, not the date paid",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "intervals": {
                        "description": "Number of six month periods the payment covers, null for forever.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/TransactionSimple"
                    }
                },
                "type": "object"
            },
            "DueSimple": {
                "title": "DueSimple",
                "description": "Attachable Due object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "ID of the Persona paying Dues.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "ID of the Transaction recording the payment.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "dues_on": {
                        "description": "The date the dues period begins, not the date paid",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "intervals": {
                        "description": "Number of six month periods the payment covers, null for forever.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "DueSuperSimple": {
                "title": "DueSuperSimpleSimple",
                "description": "Attachable Due object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "ID of the Persona paying Dues.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "ID of the Transaction recording the payment.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "dues_on": {
                        "description": "The date the dues period begins, not the date paid",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "intervals": {
                        "description": "Number of six month periods the payment covers, null for forever.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Event": {
                "description": "Events typically are either a campout or singular in nature.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * attendances (Attendance) (MorphMany): Attendances for the Event, not including demo Guests.\r\n * crats (Crat) (HasMany): Crats for the Event.\r\n * eventable (Chapter, Realm, Persona, or Unit) (MorphTo): Chapter, Realm, Persona, or Unit sponsoring the Event.\r\n * guests (Guest) (HasMany): If the Event is a demo, those who came to play with us but are not established members.\r\n * issuances (Issuance) (MorphMany): Awards and Titles Issued at the Event.\r\n * location (Location) (BelongsTo): Location of the Event.\r\n * socials (Social) (MorphMany): Socials for the Event.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "eventable_type",
                    "eventable_id",
                    "name",
                    "is_active",
                    "is_demo"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "eventable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "eventable_id": {
                        "description": "The ID of who made and runs the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "sponsorable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": true
                    },
                    "sponsorable_id": {
                        "description": "The ID of the sponsor of this Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "ID of the Location the Event takes place at, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The name of the Event.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Nerd Wars",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Event, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "This event is all about killing fellow nerds.",
                        "nullable": true
                    },
                    "image": {
                        "description": "A internal link to a promotional image for the Event, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/events/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is this Event (default true) publicly visible?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_demo": {
                        "description": "Is this Event (default false) a demo?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "event_started_at": {
                        "description": "When the Event begins.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "event_ended_at": {
                        "description": "When the Event ends.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "price": {
                        "description": "The cost of the Event, if any.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 40,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "attendances": {
                        "description": "Attachable & filterable array of Attendances for this Event.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttendanceSimple"
                        },
                        "readOnly": true
                    },
                    "crats": {
                        "description": "Attachable & filterable array of Crats for this Event.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CratSimple"
                        },
                        "readOnly": true
                    },
                    "eventable": {
                        "description": "Attachable object that sponsored the Event.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/PersonaSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "guests": {
                        "description": "Attachable & filterable array of Guests that played at this demo Event, if so.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountSimple"
                        },
                        "readOnly": true
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances made at the Event.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "location": {
                        "$ref": "#/components/schemas/LocationSimple"
                    },
                    "socials": {
                        "description": "Attachable & filterable array of the Socials of the Event.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SocialSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "EventSimple": {
                "title": "EventSimple",
                "description": "Attachable Event object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "eventable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit",
                            "Persona"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "eventable_id": {
                        "description": "The ID of who made and runs the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "sponsorable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": true
                    },
                    "sponsorable_id": {
                        "description": "The ID of the sponsor of this Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "ID of the Location the Event takes place at, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The name of the Event.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Nerd Wars",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Event, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "This event is all about killing fellow nerds.",
                        "nullable": true
                    },
                    "image": {
                        "description": "A internal link to a promotional image for the Event, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/events/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is this Event (default true) publicly visible?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_demo": {
                        "description": "Is this Event (default false) a demo?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "event_started_at": {
                        "description": "When the Event begins.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "event_ended_at": {
                        "description": "When the Event ends.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "price": {
                        "description": "The cost of the Event, if any.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 40,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "EventSuperSimple": {
                "title": "EventSuperSimpleSimple",
                "description": "Attachable Event object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "eventable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Chapter",
                            "Unit",
                            "Persona"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "eventable_id": {
                        "description": "The ID of who made and runs the Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "sponsorable_type": {
                        "description": "Who made and runs the Event; Chapter, Realm, Persona, or Unit",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": true
                    },
                    "sponsorable_id": {
                        "description": "The ID of the sponsor of this Event.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "ID of the Location the Event takes place at, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The name of the Event.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Nerd Wars",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Event, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "This event is all about killing fellow nerds.",
                        "nullable": true
                    },
                    "image": {
                        "description": "A internal link to a promotional image for the Event, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/events/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is this Event (default true) publicly visible?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_demo": {
                        "description": "Is this Event (default false) a demo?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "event_started_at": {
                        "description": "When the Event begins.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "event_ended_at": {
                        "description": "When the Event ends.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "price": {
                        "description": "The cost of the Event, if any.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 40,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Guest": {
                "description": "Visitors that play with us at demo Events.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * event (Event) (BelongsTo): Demo Event they played at.\r\n * chapter (Chapter) (BelongsTo): The closest Chapter to the Guest, if known\r\n * waiver (Waiver) (BelongsTo): Waiver for the Guest.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "event_id",
                    "waiver_id",
                    "is_followedup"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "ID of the Demo Event they were Guests for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chapter_id": {
                        "description": "ID of the closest Chapter to the Guest, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiver_id": {
                        "description": "ID of the Waiver for the Guest.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_followedup": {
                        "description": "Has this Guest (default false) been followed up with?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Notes about the Guest, if any",
                        "type": "string",
                        "format": "sentence",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "They are interested in A&S",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "event": {
                        "$ref": "#/components/schemas/EventSimple"
                    },
                    "chapter": {
                        "$ref": "#/components/schemas/ChapterSimple"
                    },
                    "waiver": {
                        "$ref": "#/components/schemas/WaiverSimple"
                    }
                },
                "type": "object"
            },
            "GuestSimple": {
                "title": "GuestSimple",
                "description": "Attachable Guest object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "ID of the Demo Event they were Guests for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chapter_id": {
                        "description": "ID of the closest Chapter to the Guest, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiver_id": {
                        "description": "ID of the Waiver for the Guest.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_followedup": {
                        "description": "Has this Guest (default false) been followed up with?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Notes about the Guest, if any",
                        "type": "string",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "They are interested in A&S",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "GuestSuperSimple": {
                "title": "GuestSuperSimpleSimple",
                "description": "Attachable Guest object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "event_id": {
                        "description": "ID of the Demo Event they were Guests for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "chapter_id": {
                        "description": "ID of the closest Chapter to the Guest, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiver_id": {
                        "description": "ID of the Waiver for the Guest.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_followedup": {
                        "description": "Has this Guest (default false) been followed up with?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Notes about the Guest, if any",
                        "type": "string",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "They are interested in A&S",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Issuance": {
                "description": "Issuances of Awards or Titles.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * issuable (Award or Title) (MorphTo): The Issuance type; Award or Title.\r\n * issuer (Chapter, Realm, Persona, or Unit) (MorphTo): Issuing authority; Chapter, Realm, Persona, or Unit.\r\n * recipient (Persona or Unit) (MorphTo): Who recieved the Issuance; Persona or Unit.\r\n * revokedBy (User) (BelongsTo): User revoked, who authorized the revocation.\r\n * signator (Persona) (BelongsTo): Persona signing the Issuance, if any.  Leave null when Issuer is Persona.\r\n * whereable (Event, Location, or Meetup) (MorphTo): Where it was Issued, if known; Event, Location, or Meetup.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "issuable_type",
                    "issuable_id",
                    "authority_type",
                    "authority_id",
                    "recipient_type",
                    "recipient_id",
                    "issued_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "issuable_type": {
                        "description": "The Issuance type; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "issuable_id": {
                        "description": "The ID of the Issuance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "whereable_type": {
                        "description": "Where it was Issued, if known; Event, Meetup, or Location.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Event",
                            "Meetup",
                            "Location"
                        ],
                        "readOnly": false,
                        "example": "Event",
                        "nullable": true
                    },
                    "whereable_id": {
                        "description": "The ID of where it was Issued.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "issuer_type": {
                        "description": "Issuing authority; Chapter, Realm, Persona, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "issuer_id": {
                        "description": "The ID of the Issuing authority.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recipient_type": {
                        "description": "Who recieved the Issuance; Persona or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Persona",
                        "nullable": false
                    },
                    "recipient_id": {
                        "description": "The ID of the Issuance recipient.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "signator_id": {
                        "description": "The ID of the Persona signing the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "custom_name": {
                        "description": "Where label options are avaiable, or customization allowed, the chosen label, else null",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 64,
                        "readOnly": false,
                        "example": "Lady",
                        "nullable": true
                    },
                    "rank": {
                        "description": "For laddered Issuances, the order number, else null.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "issued_at": {
                        "description": "When the Issuance was made or is to be made public (if in the future)",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "reason": {
                        "description": "A historical record of what the Issuance was for",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "For their work feeding everybody.",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Issuance phyrep, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/issuances/42.jpg",
                        "nullable": true
                    },
                    "revoked_by": {
                        "description": "ID of the Persona that revoked the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "revoked_at": {
                        "description": "Date the revocation is effective, if any.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "revocation": {
                        "description": "Cause for the revocation, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "He bought it on Etsy",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "issuable": {
                        "description": "Attachable object that was Issued the Award.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AwardSimple"
                            },
                            {
                                "$ref": "#/components/schemas/TitleSimple"
                            }
                        ]
                    },
                    "issuer": {
                        "description": "Attachable object that Issues the Award.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/PersonaSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "recipient": {
                        "description": "Attachable object that was Issued the Award.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PersonaSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "revokedBy": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "signator": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "whereable": {
                        "description": "Attachable object that Issues the Award.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EventSimple"
                            },
                            {
                                "$ref": "#/components/schemas/LocationSimple"
                            },
                            {
                                "$ref": "#/components/schemas/MeetupSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "IssuanceSimple": {
                "title": "IssuanceSimple",
                "description": "Attachable Issuance object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "issuable_type": {
                        "description": "The Issuance type; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "issuable_id": {
                        "description": "The ID of the Issuance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "whereable_type": {
                        "description": "Where it was Issued, if known; Event, Meetup, or Location.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Event",
                            "Meetup",
                            "Location"
                        ],
                        "readOnly": false,
                        "example": "Event",
                        "nullable": true
                    },
                    "whereable_id": {
                        "description": "The ID of where it was Issued.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "issuer_type": {
                        "description": "Issuing authority; Chapter, Realm, Persona, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "issuer_id": {
                        "description": "The ID of the Issuing authority.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recipient_type": {
                        "description": "Who recieved the Issuance; Persona or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Persona",
                        "nullable": false
                    },
                    "recipient_id": {
                        "description": "The ID of the Issuance recipient.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "signator_id": {
                        "description": "The ID of the Persona signing the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "custom_name": {
                        "description": "Where label options are avaiable, or customization allowed, the chosen label, else null",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 64,
                        "readOnly": false,
                        "example": "Lady",
                        "nullable": true
                    },
                    "rank": {
                        "description": "For laddered Issuances, the order number, else null.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "issued_at": {
                        "description": "When the Issuance was made or is to be made public (if in the future)",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "reason": {
                        "description": "A historical record of what the Issuance was for",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "For their work feeding everybody.",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Issuance phyrep, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/issuances/42.jpg",
                        "nullable": true
                    },
                    "revoked_by": {
                        "description": "ID of the Persona that revoked the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "revoked_at": {
                        "description": "Date the revocation is effective, if any.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "revocation": {
                        "description": "Cause for the revocation, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "He bought it on Etsy",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "IssuanceSuperSimple": {
                "title": "IssuanceSuperSimpleSimple",
                "description": "Attachable Issuance object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "issuable_type": {
                        "description": "The Issuance type; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "issuable_id": {
                        "description": "The ID of the Issuance.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "whereable_type": {
                        "description": "Where it was Issued, if known; Event, Meetup, or Location.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Event",
                            "Meetup",
                            "Location"
                        ],
                        "readOnly": false,
                        "example": "Event",
                        "nullable": true
                    },
                    "whereable_id": {
                        "description": "The ID of where it was Issued.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "issuer_type": {
                        "description": "Issuing authority; Chapter, Realm, Persona, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "issuer_id": {
                        "description": "The ID of the Issuing authority.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recipient_type": {
                        "description": "Who recieved the Issuance; Persona or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Persona",
                        "nullable": false
                    },
                    "recipient_id": {
                        "description": "The ID of the Issuance recipient.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "signator_id": {
                        "description": "The ID of the Persona signing the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "custom_name": {
                        "description": "Where label options are avaiable, or customization allowed, the chosen label, else null",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 64,
                        "readOnly": false,
                        "example": "Lady",
                        "nullable": true
                    },
                    "rank": {
                        "description": "For laddered Issuances, the order number, else null.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 1,
                        "nullable": true
                    },
                    "issued_at": {
                        "description": "When the Issuance was made or is to be made public (if in the future)",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "reason": {
                        "description": "A historical record of what the Issuance was for",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "For their work feeding everybody.",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Issuance phyrep, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/issuances/42.jpg",
                        "nullable": true
                    },
                    "revoked_by": {
                        "description": "ID of the Persona that revoked the Issuance, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "revoked_at": {
                        "description": "Date the revocation is effective, if any.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "revocation": {
                        "description": "Cause for the revocation, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "He bought it on Etsy",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Location": {
                "description": "Location information for Chapters, Events, Meetups, and Waivers.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * chapters (Chapter) (HasMany): Chapters using this Location.\r\n * events (Event) (HasMany): Events using this Location.\r\n * issuances (Issuance) (MorphMany): Issuances made at this Location.\r\n * meetups (Meetup) (HasMany): Meetups using this Location.\r\n * waivers (Waiver) (HasMany): Waivers using this Location.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "label": {
                        "description": "The Location label, as it might appear on a map.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "McCullum Park",
                        "nullable": true
                    },
                    "address": {
                        "description": "The street address of the Location, if any.",
                        "type": "string",
                        "format": "street",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "123 Fake St.",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city of the Location, if any.",
                        "type": "string",
                        "format": "city",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Seattle",
                        "nullable": true
                    },
                    "province": {
                        "description": "The state or provice of the Location, if any.",
                        "type": "string",
                        "format": "state",
                        "maxLength": 35,
                        "readOnly": false,
                        "example": "Texas",
                        "nullable": true
                    },
                    "postal_code": {
                        "description": "The zip or postal code of the Location, if any.",
                        "type": "string",
                        "format": "zip",
                        "maxLength": 10,
                        "readOnly": false,
                        "example": "98666",
                        "nullable": true
                    },
                    "country": {
                        "description": "The two letter country code of the Location (default US), if any.",
                        "type": "string",
                        "format": "country",
                        "default": "US",
                        "maxLength": 2,
                        "readOnly": false,
                        "example": "US",
                        "nullable": true
                    },
                    "google_geocode": {
                        "description": "JSON encoded Google Geocode data of the Location, if any.",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "latitude": {
                        "description": "Latitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "longitude": {
                        "description": "Longitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "location": {
                        "description": "JSON encoded Google location services data of the Location, if any",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "map_url": {
                        "description": "An external map link of the Location, if any",
                        "type": "string",
                        "format": "url",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "directions": {
                        "description": "Directions required to properly navigate the last part of the journey to, or park at, the Location, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Take the first right and park next to the abandoned pool.  Go down the path until you see the sign for the designated LARP area.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "chapters": {
                        "description": "Attachable & filterable array of Chapters using this Location.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChapterSimple"
                        },
                        "readOnly": true
                    },
                    "events": {
                        "description": "Attachable & filterable array of Events using this Location.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances at this Location.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "meetups": {
                        "description": "Attachable & filterable array of Meetups using this Location.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MeetupSimple"
                        },
                        "readOnly": true
                    },
                    "waivers": {
                        "description": "Attachable & filterable array of Waivers using this Location.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WaiverSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "LocationSimple": {
                "title": "LocationSimple",
                "description": "Attachable Location object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "label": {
                        "description": "The Location label, as it might appear on a map.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "McCullum Park",
                        "nullable": true
                    },
                    "address": {
                        "description": "The street address of the Location, if any.",
                        "type": "string",
                        "format": "street",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "123 Fake St.",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city of the Location, if any.",
                        "type": "string",
                        "format": "city",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Seattle",
                        "nullable": true
                    },
                    "province": {
                        "description": "The state or provice of the Location, if any.",
                        "type": "string",
                        "format": "state",
                        "maxLength": 35,
                        "readOnly": false,
                        "example": "Texas",
                        "nullable": true
                    },
                    "postal_code": {
                        "description": "The zip or postal code of the Location, if any.",
                        "type": "string",
                        "format": "zip",
                        "maxLength": 10,
                        "readOnly": false,
                        "example": "98666",
                        "nullable": true
                    },
                    "country": {
                        "description": "The two letter country code of the Location (default US), if any.",
                        "type": "string",
                        "format": "country",
                        "default": "US",
                        "maxLength": 2,
                        "readOnly": false,
                        "example": "US",
                        "nullable": true
                    },
                    "google_geocode": {
                        "description": "JSON encoded Google Geocode data of the Location, if any.",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "latitude": {
                        "description": "Latitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "longitude": {
                        "description": "Longitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "location": {
                        "description": "JSON encoded Google location services data of the Location, if any",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "map_url": {
                        "description": "An external map link of the Location, if any",
                        "type": "string",
                        "format": "url",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "directions": {
                        "description": "Directions required to properly navigate the last part of the journey to, or park at, the Location, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Take the first right and park next to the abandoned pool.  Go down the path until you see the sign for the designated LARP area.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "LocationSuperSimple": {
                "title": "LocationSuperSimpleSimple",
                "description": "Attachable Location object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "label": {
                        "description": "The Location label, as it might appear on a map.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "McCullum Park",
                        "nullable": true
                    },
                    "address": {
                        "description": "The street address of the Location, if any.",
                        "type": "string",
                        "format": "street",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "123 Fake St.",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city of the Location, if any.",
                        "type": "string",
                        "format": "city",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Seattle",
                        "nullable": true
                    },
                    "province": {
                        "description": "The state or provice of the Location, if any.",
                        "type": "string",
                        "format": "state",
                        "maxLength": 35,
                        "readOnly": false,
                        "example": "Texas",
                        "nullable": true
                    },
                    "postal_code": {
                        "description": "The zip or postal code of the Location, if any.",
                        "type": "string",
                        "format": "zip",
                        "maxLength": 10,
                        "readOnly": false,
                        "example": "98666",
                        "nullable": true
                    },
                    "country": {
                        "description": "The two letter country code of the Location (default US), if any.",
                        "type": "string",
                        "format": "country",
                        "default": "US",
                        "maxLength": 2,
                        "readOnly": false,
                        "example": "US",
                        "nullable": true
                    },
                    "google_geocode": {
                        "description": "JSON encoded Google Geocode data of the Location, if any.",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "latitude": {
                        "description": "Latitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "longitude": {
                        "description": "Longitude of the Location, if any.",
                        "type": "number",
                        "format": "double",
                        "readOnly": false,
                        "nullable": true
                    },
                    "location": {
                        "description": "JSON encoded Google location services data of the Location, if any",
                        "type": "string",
                        "format": "json",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "map_url": {
                        "description": "An external map link of the Location, if any",
                        "type": "string",
                        "format": "url",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "nullable": true
                    },
                    "directions": {
                        "description": "Directions required to properly navigate the last part of the journey to, or park at, the Location, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Take the first right and park next to the abandoned pool.  Go down the path until you see the sign for the designated LARP area.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Meetup": {
                "description": "Regular gatherings for a given Chapter.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * attendances (Attendance) (MorphMany): Attendances for the Meetup.\r\n * chapter (Chapter) (BelongsTo): Chapter that sponsors the Meetup.\r\n * issuances (Issuance) (MorphMany): Issuances made at the Meetup.\r\n * location (Location) (BelongsTo): Location of the Meetup.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "chapter_id",
                    "is_active",
                    "purpose",
                    "recurrence",
                    "week_day",
                    "occurs_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter hosting the Meetup.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location the Meetup occurs at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Meetup (default true) still occuring?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "purpose": {
                        "description": "The nature of the Meetup; Park Day, Fighter Practice, A&S Gathering, or Other.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Park Day",
                            "Fighter Practice",
                            "A&S Gathering",
                            "Other"
                        ],
                        "readOnly": false,
                        "example": "Park Day",
                        "nullable": false
                    },
                    "recurrence": {
                        "description": "The frequency with which this Meetup occurs",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Weekly",
                            "Monthly",
                            "Week-of-Month"
                        ],
                        "readOnly": false,
                        "example": "Weekly",
                        "nullable": false
                    },
                    "week_of_month": {
                        "description": "The week of the month the Meetup occurs, if recurrence is Week-of-Month",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "week_day": {
                        "description": "",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "readOnly": false,
                        "example": "Sunday",
                        "nullable": false
                    },
                    "month_day": {
                        "description": "The day of the month the Meetup occurs, if recurrence is Monthly",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "occurs_at": {
                        "description": "The time of day the Meetup takes place.",
                        "type": "string",
                        "format": "time",
                        "readOnly": false,
                        "example": "12:00:00",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Meetup, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Join us for whacks!",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "attendances": {
                        "description": "Attachable & filterable array of Attendance for the Meetup.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttendanceSimple"
                        },
                        "readOnly": true
                    },
                    "chapter": {
                        "$ref": "#/components/schemas/ChapterSimple"
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances made at the Meetup.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "location": {
                        "$ref": "#/components/schemas/LocationSimple"
                    }
                },
                "type": "object"
            },
            "MeetupSimple": {
                "title": "MeetupSimple",
                "description": "Attachable Meetup object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter hosting the Meetup.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location the Meetup occurs at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Meetup (default true) still occuring?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "purpose": {
                        "description": "The nature of the Meetup; Park Day, Fighter Practice, A&S Gathering, or Other.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Park Day",
                            "Fighter Practice",
                            "A&S Gathering",
                            "Other"
                        ],
                        "readOnly": false,
                        "example": "Park Day",
                        "nullable": false
                    },
                    "recurrence": {
                        "description": "The frequency with which this Meetup occurs",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Weekly",
                            "Monthly",
                            "Week-of-Month"
                        ],
                        "readOnly": false,
                        "example": "Weekly",
                        "nullable": false
                    },
                    "week_of_month": {
                        "description": "The week of the month the Meetup occurs, if recurrence is Week-of-Month",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "week_day": {
                        "description": "",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "readOnly": false,
                        "example": "Sunday",
                        "nullable": false
                    },
                    "month_day": {
                        "description": "The day of the month the Meetup occurs, if recurrence is Monthly",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "occurs_at": {
                        "description": "The time of day the Meetup takes place.",
                        "type": "string",
                        "format": "time",
                        "readOnly": false,
                        "example": "12:00:00",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Meetup, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Join us for whacks!",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "MeetupSuperSimple": {
                "title": "MeetupSuperSimpleSimple",
                "description": "Attachable Meetup object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter hosting the Meetup.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "location_id": {
                        "description": "The ID of the Location the Meetup occurs at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is the Meetup (default true) still occuring?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "purpose": {
                        "description": "The nature of the Meetup; Park Day, Fighter Practice, A&S Gathering, or Other.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Park Day",
                            "Fighter Practice",
                            "A&S Gathering",
                            "Other"
                        ],
                        "readOnly": false,
                        "example": "Park Day",
                        "nullable": false
                    },
                    "recurrence": {
                        "description": "The frequency with which this Meetup occurs",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Weekly",
                            "Monthly",
                            "Week-of-Month"
                        ],
                        "readOnly": false,
                        "example": "Weekly",
                        "nullable": false
                    },
                    "week_of_month": {
                        "description": "The week of the month the Meetup occurs, if recurrence is Week-of-Month",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "week_day": {
                        "description": "",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "None",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ],
                        "readOnly": false,
                        "example": "Sunday",
                        "nullable": false
                    },
                    "month_day": {
                        "description": "The day of the month the Meetup occurs, if recurrence is Monthly",
                        "type": "integer",
                        "readOnly": false,
                        "example": 2,
                        "nullable": true
                    },
                    "occurs_at": {
                        "description": "The time of day the Meetup takes place.",
                        "type": "string",
                        "format": "time",
                        "readOnly": false,
                        "example": "12:00:00",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Meetup, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Join us for whacks!",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Member": {
                "description": "Membership data for Units.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * persona (Persona) (BelongsTo): The Persona in the Unit.\r\n * unit (Unit) (BelongsTo): The Unit the Persona is in.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "unit_id",
                    "persona_id",
                    "is_head",
                    "is_voting"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has Membership in the given Unit.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "unit_id": {
                        "description": "The ID of the Unit of which the Persona is a Member.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_head": {
                        "description": "Is this Persona (default false) the single point of contact for the Unit?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_voting": {
                        "description": "Is this Persona (default false) a full voting Member?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "joined_at": {
                        "description": "The date this Persona joined the Unit, if known.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "left_at": {
                        "description": "The date this Persona left the Unit, if they have.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes on the Membership, if any",
                        "type": "string",
                        "readOnly": false,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "unit": {
                        "$ref": "#/components/schemas/UnitSimple"
                    }
                },
                "type": "object"
            },
            "MemberSimple": {
                "title": "MemberSimple",
                "description": "Attachable Member object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has Membership in the given Unit.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "unit_id": {
                        "description": "The ID of the Unit of which the Persona is a Member.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_head": {
                        "description": "Is this Persona (default false) the single point of contact for the Unit?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_voting": {
                        "description": "Is this Persona (default false) a full voting Member?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "joined_at": {
                        "description": "The date this Persona joined the Unit, if known.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "left_at": {
                        "description": "The date this Persona left the Unit, if they have.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes on the Membership, if any",
                        "type": "string",
                        "readOnly": false,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "MemberSuperSimple": {
                "title": "MemberSuperSimpleSimple",
                "description": "Attachable Member object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has Membership in the given Unit.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "unit_id": {
                        "description": "The ID of the Unit of which the Persona is a Member.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "is_head": {
                        "description": "Is this Persona (default false) the single point of contact for the Unit?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_voting": {
                        "description": "Is this Persona (default false) a full voting Member?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "joined_at": {
                        "description": "The date this Persona joined the Unit, if known.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "left_at": {
                        "description": "The date this Persona left the Unit, if they have.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes on the Membership, if any",
                        "type": "string",
                        "readOnly": false,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Office": {
                "description": "Offices available for the given Chaptertype, Realm, or Unit.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * officeable (Chaptertype, Realm, or Unit) (MorphTo): Type for what the Office is for; Chaptertype, Realm, or Unit.\r\n * officers (Officer) (HasMany): Officers having held this Office.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "officeable_type",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officeable_type": {
                        "description": "Type for what the Office is for; Chaptertype, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chaptertype",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chaptertype",
                        "nullable": false
                    },
                    "officeable_id": {
                        "description": "The ID of what the Office is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Office, options delineated with a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Prime Minister",
                        "nullable": false
                    },
                    "duration": {
                        "description": "Duration, in months, of the office (default 6)",
                        "type": "integer",
                        "format": "int32",
                        "default": 6,
                        "example": 6,
                        "nullable": true
                    },
                    "order": {
                        "description": "If the Realm has an order of precedence, the office level where Monarch = 1, else null",
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "officeable": {
                        "description": "Attachable object the Office is for.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChaptertypeSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "officers": {
                        "description": "Attachable & filterable array of Officers having held the Office.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "OfficeSimple": {
                "title": "OfficeSimple",
                "description": "Attachable Office object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officeable_type": {
                        "description": "Type for what the Office is for; Chaptertype, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chaptertype",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chaptertype",
                        "nullable": false
                    },
                    "officeable_id": {
                        "description": "The ID of what the Office is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Office, options delineated with a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Prime Minister",
                        "nullable": false
                    },
                    "duration": {
                        "description": "Duration, in months, of the office (default 6)",
                        "type": "integer",
                        "format": "int32",
                        "default": 6,
                        "example": 6,
                        "nullable": true
                    },
                    "order": {
                        "description": "If the Realm has an order of precedence, the office level where Monarch = 1, else null",
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "OfficeSuperSimple": {
                "title": "OfficeSuperSimpleSimple",
                "description": "Attachable Office object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officeable_type": {
                        "description": "Type for what the Office is for; Chaptertype, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chaptertype",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chaptertype",
                        "nullable": false
                    },
                    "officeable_id": {
                        "description": "The ID of what the Office is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Office, options delineated with a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Prime Minister",
                        "nullable": false
                    },
                    "duration": {
                        "description": "Duration, in months, of the office (default 6)",
                        "type": "integer",
                        "format": "int32",
                        "default": 6,
                        "example": 6,
                        "nullable": true
                    },
                    "order": {
                        "description": "If the Realm has an order of precedence, the office level where Monarch = 1, else null",
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Officer": {
                "description": "Officers for the given Reign or Unit<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * office (Office) (BelongsTo): Office held.\r\n * officerable (Reign or Unit) (MorphTo): Reign or Unit the Persona is an Officer of.\r\n * persona (Persona) (BelongsTo): Persona holding the given Office.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "officerable_type",
                    "officerable_id",
                    "office_id",
                    "persona_id"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officerable_type": {
                        "description": "Type of that which the Persona is Officer of; Reign or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Reign",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Reign",
                        "nullable": false
                    },
                    "officerable_id": {
                        "description": "The ID of the Reign or Unit they are Officer of.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "office_id": {
                        "description": "The ID of the Office this Persona held.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona holding this Office.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "label": {
                        "description": "If the Office name has options, or allows customization, the selected label, if any.",
                        "type": "string",
                        "format": "capitalize first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Queen",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "If the Officer is pro-tem, or is for a Unit, when the Office began, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "ends_on": {
                        "description": "If the Officer ends their term early, or is for a Unit, when the Office was exited, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes about the Officer or their time in office, or explaining pro-tem, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Took over after the last guy got banned.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "office": {
                        "$ref": "#/components/schemas/OfficeSimple"
                    },
                    "officerable": {
                        "description": "Attachable object the Persona is an Officer of.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ReignSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "OfficerSimple": {
                "title": "OfficerSimple",
                "description": "Attachable Officer object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officerable_type": {
                        "description": "Type of that which the Persona is Officer of; Reign or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Reign",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Reign",
                        "nullable": false
                    },
                    "officerable_id": {
                        "description": "The ID of the Reign or Unit they are Officer of.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "office_id": {
                        "description": "The ID of the Office this Persona held.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona holding this Office.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "label": {
                        "description": "If the Office name has options, or allows customization, the selected label, if any.",
                        "type": "string",
                        "format": "capitalize first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Queen",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "If the Officer is pro-tem, or is for a Unit, when the Office began, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "ends_on": {
                        "description": "If the Officer ends their term early, or is for a Unit, when the Office was exited, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes about the Officer or their time in office, or explaining pro-tem, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Took over after the last guy got banned.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "OfficerSuperSimple": {
                "title": "OfficerSuperSimpleSimple",
                "description": "Attachable Officer object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "officerable_type": {
                        "description": "Type of that which the Persona is Officer of; Reign or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Reign",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Reign",
                        "nullable": false
                    },
                    "officerable_id": {
                        "description": "The ID of the Reign or Unit they are Officer of.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "office_id": {
                        "description": "The ID of the Office this Persona held.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona holding this Office.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "label": {
                        "description": "If the Office name has options, or allows customization, the selected label, if any.",
                        "type": "string",
                        "format": "capitalize first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "Queen",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "If the Officer is pro-tem, or is for a Unit, when the Office began, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "ends_on": {
                        "description": "If the Officer ends their term early, or is for a Unit, when the Office was exited, otherwise null to use Reign data.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Notes about the Officer or their time in office, or explaining pro-tem, if any",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Took over after the last guy got banned.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Persona": {
                "description": "Members of Amtgard.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * attendances (Attendance) (HasMany): Attendances for the Persona.\r\n * awards (Issuance) {MorphMany): Awards received by the Persona.\r\n * chapter (Chapter) (BelongsTo): Chapter the Persona calls home.\r\n * crats (Crat) (HasMany): Crat positions held by the Persona.\r\n * dues (Due) (HasMany): Dues paid by the Persona.\r\n * events (Event) (MorphMany): Events sponsored by the Persona.\r\n * issuanceGivens (Issuance) {MorphMany): Issuances made by the Persona, typically retainer and squire Titles.\r\n * issuanceRevokeds (Issuance) {MorphMany): Issuances revoked by the Persona.\r\n * issuanceSigneds (Issuance) {MorphMany): Issuances signed by the Persona.\r\n * members (Member) (HasMany): Memberships in Units the Persona has had.\r\n * officers (Officer) (HasMany): Officer positions held by the Persona.\r\n * pronoun (Pronoun) (BelongsTo): Prefered selected pronouns for the Persona.\r\n * recommendations (Recommendation) (HasMany): Issuance Recommendations made for this Persona.\r\n * reconciliations (Reconciliation) (HasMany): Credit reconciliations for this Persona.\r\n * socials (Social) (MorphMany): Socials for the Persona.\r\n * splits (Split) (HasMany): Splits this Persona took part in.\r\n * suspensions (Suspension) (HasMany): Suspensions the Persona has undergone.\r\n * suspensionIssueds (Suspension) (HasMany): Suspensions the Persona has issued.\r\n * titles (Issuance) {MorphMany): Titles received by the Persona.\r\n * titleIssuables (Title) (MorphMany): Titles the Persona can Issue.\r\n * units (Unit) (HasManyThrough): Companies and Households the Persona is in.\r\n * user (User) (BelongsTo): The User for the Persona.\r\n * waivers (Waiver) (HasMany): The Waivers for the Persona.\r\n * waiverVerifieds (Waiver) (HasMany): Waivers age verified by the Persona.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "chapter_id",
                    "name",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter the Persona is Waivered at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "pronoun_id": {
                        "description": "The ID of the pronouns associated with this Persona, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "mundane": {
                        "description": "What the Persona typically enters into the Mundane field of the sign-in.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": true
                    },
                    "name": {
                        "description": "The Persona name, without titles or honors, but otherwise in full.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Color Animal",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Persona heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personaHeraldries/42.jpg",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Persona",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personas/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Persona still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reeve_qualified_expires_at": {
                        "description": "If they are Reeve Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "corpora_qualified_expires_at": {
                        "description": "If they are Corpora Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "joined_chapter_at": {
                        "description": "The date the Persona joined the Chapter, either as a newb or a transfer.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "attendances": {
                        "description": "Attachable & filterable array of Attendances for the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttendanceSimple"
                        },
                        "readOnly": true
                    },
                    "awards": {
                        "description": "Attachable & filterable array of Issuances received by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "chapter": {
                        "$ref": "#/components/schemas/ChapterSimple"
                    },
                    "crats": {
                        "description": "Attachable & filterable array of Crat positions held by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CratSimple"
                        },
                        "readOnly": true
                    },
                    "dues": {
                        "description": "Attachable & filterable array of Dues paid by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    },
                    "events": {
                        "description": "Attachable & filterable array of Events sponsored by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "issuanceGivens": {
                        "description": "Attachable & filterable array of Issuances made by the Persona, typically retainer and squire Titles.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "issuanceRevokeds": {
                        "description": "Attachable & filterable array of Issuances revoked by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "issuanceSigneds": {
                        "description": "Attachable & filterable array of Issuances signed by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "members": {
                        "description": "Attachable & filterable array of Memberships in Units the Persona has had.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MemberSimple"
                        },
                        "readOnly": true
                    },
                    "officers": {
                        "description": "Attachable & filterable array of Officer positions held by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    },
                    "pronoun": {
                        "$ref": "#/components/schemas/PronounSimple"
                    },
                    "recommendations": {
                        "description": "Attachable & filterable array of Issuance Recommendations made for this Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecommendationSimple"
                        },
                        "readOnly": true
                    },
                    "reconciliations": {
                        "description": "Attachable & filterable array of Credit reconciliations for this Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReconciliationSimple"
                        },
                        "readOnly": true
                    },
                    "splits": {
                        "description": "Attachable & filterable array of Splits this Persona took part in.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SplitSimple"
                        },
                        "readOnly": true
                    },
                    "socials": {
                        "description": "Attachable & filterable array of the Socials of the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SocialSimple"
                        },
                        "readOnly": true
                    },
                    "suspensions": {
                        "description": "Attachable & filterable array of Suspensions the Persona has undergone.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuspensionSimple"
                        },
                        "readOnly": true
                    },
                    "suspensionIssueds": {
                        "description": "Attachable & filterable array of Suspensions the Persona has issued.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuspensionSimple"
                        },
                        "readOnly": true
                    },
                    "titles": {
                        "description": "Attachable & filterable array of Title Issuances received by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "titleIssuables": {
                        "description": "Attachable & filterable array of the Titles the Persona can Issue.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TitleSimple"
                        },
                        "readOnly": true
                    },
                    "units": {
                        "description": "Attachable & filterable array of the Companies and Households the Persona is in.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UnitSimple"
                        },
                        "readOnly": true
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "waivers": {
                        "description": "Attachable & filterable array of Waivers for the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WaiverSimple"
                        },
                        "readOnly": true
                    },
                    "waiverVerifieds": {
                        "description": "Attachable & filterable array of Waivers age verified by the Persona.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WaiverSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "PersonaSimple": {
                "title": "PersonaSimple",
                "description": "Attachable Persona object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter the Persona is Waivered at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "pronoun_id": {
                        "description": "The ID of the pronouns associated with this Persona, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "mundane": {
                        "description": "What the Persona typically enters into the Mundane field of the sign-in.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": true
                    },
                    "name": {
                        "description": "The Persona name, without titles or honors, but otherwise in full.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Color Animal",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Persona heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personaHeraldries/42.jpg",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Persona",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personas/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Persona still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reeve_qualified_expires_at": {
                        "description": "If they are Reeve Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "corpora_qualified_expires_at": {
                        "description": "If they are Corpora Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "joined_chapter_at": {
                        "description": "The date the Persona joined the Chapter, either as a newb or a transfer.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "PersonaSuperSimple": {
                "title": "PersonaSuperSimpleSimple",
                "description": "Attachable Persona object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "chapter_id": {
                        "description": "The ID of the Chapter the Persona is Waivered at.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "pronoun_id": {
                        "description": "The ID of the pronouns associated with this Persona, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "mundane": {
                        "description": "What the Persona typically enters into the Mundane field of the sign-in.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": true
                    },
                    "name": {
                        "description": "The Persona name, without titles or honors, but otherwise in full.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Color Animal",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Persona heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personaHeraldries/42.jpg",
                        "nullable": true
                    },
                    "image": {
                        "description": "An internal link to an image of the Persona",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/personas/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Persona still active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reeve_qualified_expires_at": {
                        "description": "If they are Reeve Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "corpora_qualified_expires_at": {
                        "description": "If they are Corpora Qualified, when it expires.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "joined_chapter_at": {
                        "description": "The date the Persona joined the Chapter, either as a newb or a transfer.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Pronoun": {
                "description": "Pronouns perfered.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * personas (Persona) (HasMany): Personas using the Pronoun.\r\n * waivers (Waivers) (HasMany): Waivers using the Pronoun.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "subject",
                    "object",
                    "possessive",
                    "possessivepronoun",
                    "reflexive"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "subject": {
                        "description": "Pronoun Subject",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "object": {
                        "description": "Pronoun Object",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "possessive": {
                        "description": "Pronoun Possessive",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Possessive Pronoun": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Reflexive": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "PronounSimple": {
                "title": "PronounSimple",
                "description": "Attachable Pronoun object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "subject": {
                        "description": "Pronoun Subject",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "object": {
                        "description": "Pronoun Object",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "possessive": {
                        "description": "Pronoun Possessive",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Possessive Pronoun": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Reflexive": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "PronounSuperSimple": {
                "title": "PronounSuperSimpleSimple",
                "description": "Attachable Pronoun object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "subject": {
                        "description": "Pronoun Subject",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "object": {
                        "description": "Pronoun Object",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "possessive": {
                        "description": "Pronoun Possessive",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Possessive Pronoun": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    },
                    "Pronoun Reflexive": {
                        "description": "",
                        "type": "string",
                        "readOnly": false,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Realm": {
                "description": "Collective of Chapters, often Kingdoms, but including Principalities and Grand Duchies.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * accounts (Account) (MorphMany): Accounts for the Realm.\r\n * awards (Awards) (MorphMany): Awards this Realm can issue.\r\n * chapters (Chapter) (HasMany): Chapters of the Realm.\r\n * chaptertypes (Chaptertype) (HasMany): Chaptertypes the Realm uses.\r\n * events (Event) (MorphMany): Events run by the Realm.\r\n * issuances (Issuance) (MorphMany): Issuances made by the Realm.\r\n * offices (Office) (MorphMany): Offices of the Realm.\r\n * reign (Reign) (MorphOne): The current Reign for the Realm.\r\n * reigns (Reign) (MorphMany): Reigns of the Realm.\r\n * socials (Social) (MorphMany): Socials for the Realm.\r\n * sponsors (Event) (MorphMany): Persona or Unit Events this Realm has sponsored.\r\n * suspensions (Suspension) (MorphMany): Suspensions levied by the Realm.\r\n * titles (Title) (MorphMany): Titles the Realm Issues.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "name",
                    "abbreviation",
                    "color",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "If sponsored by another Realm, that Realm ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "name": {
                        "description": "The label for the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "The Republic of Futurama",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A simple, unique, usually two letter abbreviation commonly used for the Realm",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 4,
                        "readOnly": false,
                        "example": "FR",
                        "nullable": false
                    },
                    "color": {
                        "description": "The hexidecimal code (default FACADE) for the color used for the Realm on various UIs.",
                        "type": "string",
                        "format": "hexidecimal",
                        "default": "FACADE",
                        "readOnly": false,
                        "example": "000000",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Realm heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/realms/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Realm active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "credit_minimum": {
                        "description": "Realm Credit Minimum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "credit_maximum": {
                        "description": "Realm Credit Maximum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 32,
                        "nullable": true
                    },
                    "daily_minimum": {
                        "description": "Realm Daily Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "weekly_minimum": {
                        "description": "Realm Weekly Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 9,
                        "nullable": true
                    },
                    "average_period_type": {
                        "description": "Realm Average Period Type setting, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "average_period": {
                        "description": "Realm Average Period setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "dues_amount": {
                        "description": "Dues cost per interval for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 12,
                        "nullable": true
                    },
                    "dues_intervals_type": {
                        "description": "Dues intervals type for the Realm, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "dues_intervals": {
                        "description": "Dues intervals count for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "dues_take": {
                        "description": "Realm take of Dues paid to Chapters, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 5,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "accounts": {
                        "description": "Attachable & filterable array of Accounts for the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountSimple"
                        },
                        "readOnly": true
                    },
                    "awards": {
                        "description": "Attachable & filterable array of Awards this Realm can issue.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AwardSimple"
                        },
                        "readOnly": true
                    },
                    "chapters": {
                        "description": "Attachable & filterable array of Chapters of the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChapterSimple"
                        },
                        "readOnly": true
                    },
                    "chaptertypes": {
                        "description": "Attachable & filterable array of Chaptertypes the Realm uses.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChaptertypeSimple"
                        },
                        "readOnly": true
                    },
                    "events": {
                        "description": "Attachable & filterable array of Events sponsored by the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances made by the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "offices": {
                        "description": "Attachable & filterable array of Offices of the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficeSimple"
                        },
                        "readOnly": true
                    },
                    "reign": {
                        "description": "Attachable & filterable array of the current Reign for the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReignSimple"
                        },
                        "readOnly": true
                    },
                    "reigns": {
                        "description": "Attachable & filterable array of the Reigns of the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReignSimple"
                        },
                        "readOnly": true
                    },
                    "socials": {
                        "description": "Attachable & filterable array of the Socials of the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SocialSimple"
                        },
                        "readOnly": true
                    },
                    "sponsors": {
                        "description": "Attachable & filterable array of Persona or Unit Events this Realm has sponsored.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "suspensions": {
                        "description": "Attachable & filterable array of Suspensions levied by the Realm.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SuspensionSimple"
                        },
                        "readOnly": true
                    },
                    "titles": {
                        "description": "Attachable & filterable array of the Titles the Realm Issues.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TitleSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "RealmSimple": {
                "title": "RealmSimple",
                "description": "Attachable Realm object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "If sponsored by another Realm, that Realm ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The label for the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "The Republic of Futurama",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A simple, unique, usually two letter abbreviation commonly used for the Realm",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 4,
                        "readOnly": false,
                        "example": "FR",
                        "nullable": false
                    },
                    "color": {
                        "description": "The hexidecimal code (default FACADE) for the color used for the Realm on various UIs.",
                        "type": "string",
                        "format": "hexidecimal",
                        "default": "FACADE",
                        "readOnly": false,
                        "example": "000000",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Realm heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/realms/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Realm active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "credit_minimum": {
                        "description": "Realm Credit Minimum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "credit_maximum": {
                        "description": "Realm Credit Maximum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 32,
                        "nullable": true
                    },
                    "daily_minimum": {
                        "description": "Realm Daily Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "weekly_minimum": {
                        "description": "Realm Weekly Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 9,
                        "nullable": true
                    },
                    "average_period_type": {
                        "description": "Realm Average Period Type setting, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "average_period": {
                        "description": "Realm Average Period setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "dues_amount": {
                        "description": "Dues cost per interval for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 12,
                        "nullable": true
                    },
                    "dues_intervals_type": {
                        "description": "Dues intervals type for the Realm, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "dues_intervals": {
                        "description": "Dues intervals count for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "dues_take": {
                        "description": "Realm take of Dues paid to Chapters, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 5,
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "RealmSuperSimple": {
                "title": "RealmSuperSimpleSimple",
                "description": "Attachable Realm object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "parent_id": {
                        "description": "If sponsored by another Realm, that Realm ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The label for the Realm.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "The Republic of Futurama",
                        "nullable": false
                    },
                    "abbreviation": {
                        "description": "A simple, unique, usually two letter abbreviation commonly used for the Realm",
                        "type": "string",
                        "format": "uppercase",
                        "maxLength": 4,
                        "readOnly": false,
                        "example": "FR",
                        "nullable": false
                    },
                    "color": {
                        "description": "The hexidecimal code (default FACADE) for the color used for the Realm on various UIs.",
                        "type": "string",
                        "format": "hexidecimal",
                        "default": "FACADE",
                        "readOnly": false,
                        "example": "000000",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Realm heraldry.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/realms/42.jpg",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Is (default true) the Realm active?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "credit_minimum": {
                        "description": "Realm Credit Minimum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "credit_maximum": {
                        "description": "Realm Credit Maximum setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 32,
                        "nullable": true
                    },
                    "daily_minimum": {
                        "description": "Realm Daily Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "weekly_minimum": {
                        "description": "Realm Weekly Minimum setting, if any",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 9,
                        "nullable": true
                    },
                    "average_period_type": {
                        "description": "Realm Average Period Type setting, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "average_period": {
                        "description": "Realm Average Period setting, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "dues_amount": {
                        "description": "Dues cost per interval for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 12,
                        "nullable": true
                    },
                    "dues_intervals_type": {
                        "description": "Dues intervals type for the Realm, if any.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Week",
                            "Month"
                        ],
                        "readOnly": false,
                        "example": "Week",
                        "nullable": true
                    },
                    "dues_intervals": {
                        "description": "Dues intervals count for the Realm, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 6,
                        "nullable": true
                    },
                    "dues_take": {
                        "description": "Realm take of Dues paid to Chapters, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 5,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Recommendation": {
                "description": "Recommendations for Personas to be Issued an Award or Title.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * persona (Persona) (BelongsTo): Persona the Recommendation is for.\r\n * recommendable (Award or Title) (MorphTo): The Type of Issuances being Recommended; Award or Title.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "persona_id",
                    "recommendable_type",
                    "is_anonymous",
                    "reason"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona the Recommendation is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recommendable_type": {
                        "description": "The type of Issuances being Recommended; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Award",
                        "nullable": false
                    },
                    "recommendable_id": {
                        "description": "The ID of the Title or Award being Recommended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "rank": {
                        "description": "If a ranked or ladder award, Recommended level.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 3,
                        "nullable": true
                    },
                    "is_anonymous": {
                        "description": "Does (default false) the Recommendation creator wish to be anonymous?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reason": {
                        "description": "What the Recommendation is for.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "Being teh awesome!",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "recommendable": {
                        "description": "Attachable object being Recommended.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AwardSimple"
                            },
                            {
                                "$ref": "#/components/schemas/TitleSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "RecommendationSimple": {
                "title": "RecommendationSimple",
                "description": "Attachable Recommendation object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona the Recommendation is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recommendable_type": {
                        "description": "The type of Issuances being Recommended; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Award",
                        "nullable": false
                    },
                    "recommendable_id": {
                        "description": "The ID of the Title or Award being Recommended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "rank": {
                        "description": "If a ranked or ladder award, Recommended level.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 3,
                        "nullable": true
                    },
                    "is_anonymous": {
                        "description": "Does (default false) the Recommendation creator wish to be anonymous?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reason": {
                        "description": "What the Recommendation is for.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "Being teh awesome!",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "RecommendationSuperSimple": {
                "title": "RecommendationSuperSimpleSimple",
                "description": "Attachable Recommendation object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona the Recommendation is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "recommendable_type": {
                        "description": "The type of Issuances being Recommended; Award or Title.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Award",
                            "Title"
                        ],
                        "readOnly": false,
                        "example": "Award",
                        "nullable": false
                    },
                    "recommendable_id": {
                        "description": "The ID of the Title or Award being Recommended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "rank": {
                        "description": "If a ranked or ladder award, Recommended level.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 3,
                        "nullable": true
                    },
                    "is_anonymous": {
                        "description": "Does (default false) the Recommendation creator wish to be anonymous?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "reason": {
                        "description": "What the Recommendation is for.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 400,
                        "readOnly": false,
                        "example": "Being teh awesome!",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Reconciliation": {
                "description": "Reconciliations allow us to make sum adjustments to a Persona's credits.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * archetype (Archetype) (BelongsTo): Archetype credits being Reconciled.\r\n * persona (Persona) (BelongsTo): Persona credits being Reconciled.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "archetype_id",
                    "persona_id",
                    "credits"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "archetype_id": {
                        "description": "The ID of the Archetype the Reconcilliation credits are for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 16,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona getting Reconciled.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "credits": {
                        "description": "The number of credits to be given or removed (with negative value) from the Persona for the Archetype.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 400,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Why the Reconciliation was required, and how they might be removed.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Credits earned sometime in the late 90s across several parks.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "archetype": {
                        "$ref": "#/components/schemas/ArchetypeSimple"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "ReconciliationSimple": {
                "title": "ReconciliationSimple",
                "description": "Attachable Reconciliation object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "archetype_id": {
                        "description": "The ID of the Archetype the Reconcilliation credits are for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 16,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona getting Reconciled.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "credits": {
                        "description": "The number of credits to be given or removed (with negative value) from the Persona for the Archetype.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 400,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Why the Reconciliation was required, and how they might be removed.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Credits earned sometime in the late 90s across several parks.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "ReconciliationSuperSimple": {
                "title": "ReconciliationSuperSimpleSimple",
                "description": "Attachable Reconciliation object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "archetype_id": {
                        "description": "The ID of the Archetype the Reconcilliation credits are for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 16,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona getting Reconciled.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "credits": {
                        "description": "The number of credits to be given or removed (with negative value) from the Persona for the Archetype.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 400,
                        "nullable": false
                    },
                    "notes": {
                        "description": "Why the Reconciliation was required, and how they might be removed.",
                        "type": "string",
                        "format": "paragraph",
                        "readOnly": false,
                        "example": "Credits earned sometime in the late 90s across several parks.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Reign": {
                "description": "The rule of the Officer team is a Reign, typically six months.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * officers (Officer) (MorphMany): Officers of the Reign.\r\n * reignable (Chapter or Realm) (MorphTo): The Reign type; Realm or Chapter.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "reignable_type",
                    "starts_on",
                    "ends_on"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "reignable_type": {
                        "description": "The Reign type; Chapter or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "reignable_id": {
                        "description": "The ID of the Realm or Chapter this Reign is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Reign, if any",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Reign XXXXII",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "Date the Reign begins (coronation).",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "midreign_on": {
                        "description": "Date of the Reign Midreign.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-03-30",
                        "nullable": false
                    },
                    "ends_on": {
                        "description": "Date the next Reign begins, and this one ends.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2021-06-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "officers": {
                        "description": "Attachable & filterable array of Officers of the Reign.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    },
                    "reignable": {
                        "description": "Attachable object the Reign is for.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "ReignSimple": {
                "title": "ReignSimple",
                "description": "Attachable Reign object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "reignable_type": {
                        "description": "The Reign type; Chapter or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "reignable_id": {
                        "description": "The ID of the Realm or Chapter this Reign is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Reign, if any",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Reign XXXXII",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "Date the Reign begins (coronation).",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "midreign_on": {
                        "description": "Date of the Reign Midreign.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-03-30",
                        "nullable": false
                    },
                    "ends_on": {
                        "description": "Date the next Reign begins, and this one ends.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2021-06-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "ReignSuperSimple": {
                "title": "ReignSuperSimpleSimple",
                "description": "Attachable Reign object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "reignable_type": {
                        "description": "The Reign type; Chapter or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "reignable_id": {
                        "description": "The ID of the Realm or Chapter this Reign is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Reign, if any",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Reign XXXXII",
                        "nullable": true
                    },
                    "starts_on": {
                        "description": "Date the Reign begins (coronation).",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "midreign_on": {
                        "description": "Date of the Reign Midreign.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-03-30",
                        "nullable": false
                    },
                    "ends_on": {
                        "description": "Date the next Reign begins, and this one ends.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2021-06-30",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Social": {
                "description": "Various web and app accounts and links associated with a Chapter, Event, Persona, Realm, or Unit.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * sociable (Social) (MorphTo): Model the Social is being attached to.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "sociable_type",
                    "media",
                    "value"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "sociable_type": {
                        "description": "The Model for which the Social is for; Chapter, Event, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "sociable_id": {
                        "description": "The ID of the entry with this Social.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "media": {
                        "description": "The type of Social; Discord, Facebook, Instagram, TicToc, YouTube, or Web",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Discord",
                            "Facebook",
                            "Instagram",
                            "TicToc",
                            "YouTube",
                            "Web"
                        ],
                        "readOnly": false,
                        "example": "Web",
                        "nullable": false
                    },
                    "value": {
                        "description": "The link, username, or other identifier for the given media.",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "https://ork.amtgard.com",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "officers": {
                        "description": "Attachable & filterable array of Officers of the Reign.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    },
                    "sociable": {
                        "$ref": "#/components/schemas/SocialSimple"
                    }
                },
                "type": "object"
            },
            "SocialSimple": {
                "title": "SocialSimple",
                "description": "Attachable Social object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "sociable_type": {
                        "description": "The Model for which the Social is for; Chapter, Event, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "sociable_id": {
                        "description": "The ID of the entry with this Social.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "media": {
                        "description": "The type of Social; Discord, Facebook, Instagram, TicToc, YouTube, or Web",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Discord",
                            "Facebook",
                            "Instagram",
                            "TicToc",
                            "YouTube",
                            "Web"
                        ],
                        "readOnly": false,
                        "example": "Web",
                        "nullable": false
                    },
                    "value": {
                        "description": "The link, username, or other identifier for the given media.",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "https://ork.amtgard.com",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "SocialSuperSimple": {
                "title": "SocialSuperSimpleSimple",
                "description": "Attachable Social object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "sociable_type": {
                        "description": "The Model for which the Social is for; Chapter, Event, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "sociable_id": {
                        "description": "The ID of the entry with this Social.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "media": {
                        "description": "The type of Social; Discord, Facebook, Instagram, TicToc, YouTube, or Web",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Discord",
                            "Facebook",
                            "Instagram",
                            "TicToc",
                            "YouTube",
                            "Web"
                        ],
                        "readOnly": false,
                        "example": "Web",
                        "nullable": false
                    },
                    "value": {
                        "description": "The link, username, or other identifier for the given media.",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "https://ork.amtgard.com",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Split": {
                "description": "Splits are individual dollar amounts associated with a Transaction.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * account (Account) (BelongsTo): Account this Split is for.\r\n * persona (Persona) (BelongsTo): Persona performing the Transaction this Split is for.\r\n * transaction (Transaction) (BelongsTo): Transaction being Split.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "transaction_id",
                    "persona_id",
                    "amount"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "account_id": {
                        "description": "The ID of the Account this Split is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona performing the Transaction.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "The ID of the Transaction being Split.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "amount": {
                        "description": "How much the Split is for.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 12,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "account": {
                        "$ref": "#/components/schemas/AccountSimple"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/TransactionSimple"
                    }
                },
                "type": "object"
            },
            "SplitSimple": {
                "title": "SplitSimple",
                "description": "Attachable Split object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "account_id": {
                        "description": "The ID of the Account this Split is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona performing the Transaction.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "The ID of the Transaction being Split.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "amount": {
                        "description": "How much the Split is for.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 12,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "SplitSuperSimple": {
                "title": "SplitSuperSimpleSimple",
                "description": "Attachable Split object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "account_id": {
                        "description": "The ID of the Account this Split is for.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "persona_id": {
                        "description": "The ID of the Persona performing the Transaction.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "transaction_id": {
                        "description": "The ID of the Transaction being Split.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "amount": {
                        "description": "How much the Split is for.",
                        "type": "number",
                        "format": "float",
                        "readOnly": false,
                        "example": 12,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Suspension": {
                "description": "On the occasion when an Amtgarder must be disciplined, we record it here.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * persona (Persona) (BelongsTo): The Persona that has been Suspended.\r\n * suspendable (Chapter, Realm) (MorphTo): Chapter or Realm levying the Suspension.\r\n * realm (Realm) (BelongsTo): The Realm issuing the Suspension.\r\n * suspendedBy (User) (BelongsTo): User Persona issuing the Suspension.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "persona_id",
                    "suspendable_type",
                    "suspendable_id",
                    "suspended_by",
                    "cause",
                    "is_propogating"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has been Suspended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspendable_type": {
                        "description": "Who levied the Suspension; Chapter or Realm",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "suspendable_id": {
                        "description": "The ID of who levied the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_by": {
                        "description": "The ID of the Persona issuing the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "expires_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "cause": {
                        "description": "Why the suspension was issued.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "nullable": false
                    },
                    "is_propogating": {
                        "description": "Does the Suspension (default false) propogate to all Realms?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "realm": {
                        "$ref": "#/components/schemas/RealmSimple"
                    },
                    "suspendedBy": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "SuspensionSimple": {
                "title": "SuspensionSimple",
                "description": "Attachable Suspension object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has been Suspended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspendable_type": {
                        "description": "Who levied the Suspension; Chapter or Realm",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "suspendable_id": {
                        "description": "The ID of who levied the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_by": {
                        "description": "The ID of the Persona issuing the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "expires_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "cause": {
                        "description": "Why the suspension was issued.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "nullable": false
                    },
                    "is_propogating": {
                        "description": "Does the Suspension (default false) propogate to all Realms?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "SuspensionSuperSimple": {
                "title": "SuspensionSuperSimpleSimple",
                "description": "Attachable Suspension object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "The ID of the Persona that has been Suspended.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspendable_type": {
                        "description": "Who levied the Suspension; Chapter or Realm",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Realm",
                            "Persona",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "suspendable_id": {
                        "description": "The ID of who levied the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_by": {
                        "description": "The ID of the Persona issuing the Suspension.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "suspended_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "expires_at": {
                        "description": "",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "cause": {
                        "description": "Why the suspension was issued.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "nullable": false
                    },
                    "is_propogating": {
                        "description": "Does the Suspension (default false) propogate to all Realms?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Title": {
                "description": "Titles Issued by the Chapter, Persona, Realm, or Unit.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * issuances (Issuance) (MorphMany): Issuances of this Title.\r\n * titleable (Chapter, Persona, Realm, or Unit) (MorphTo): Who can issue the Title; Chapter, Persona, Realm, or Unit\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "titleable_type",
                    "name",
                    "peerage",
                    "is_roaming",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "titleable_type": {
                        "description": "Who can issue the Title; Chapter, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "titleable_id": {
                        "description": "The ID of the Title Issuer.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Title name with options seperated by a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Lord|Lady",
                        "nullable": false
                    },
                    "rank": {
                        "description": "For Realm Titles or where appropriate, their order of prescidence in that Realm expressed (usually) in multiples of 10, where Lord|Lady are typically 30.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 30,
                        "nullable": true
                    },
                    "peerage": {
                        "description": "The peerage (default None) of the Title; Gentry, Knight, Master, Nobility, None, Paragon, Retainer, or Squire",
                        "type": "string",
                        "format": "enum",
                        "default": "None",
                        "enum": [
                            "Gentry",
                            "Knight",
                            "Master",
                            "Nobility",
                            "None",
                            "Paragon",
                            "Retainer",
                            "Squire"
                        ],
                        "readOnly": false,
                        "example": 1,
                        "nullable": false
                    },
                    "is_roaming": {
                        "description": "Is the Title (default false) roaming, such as Dragonmaster?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is this Title (default true) still being given out?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "issuances": {
                        "description": "Attachable & filterable array of Issuances of this Title.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "titleable": {
                        "description": "Attachable object that can Issue the Title.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/PersonaSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            },
                            {
                                "$ref": "#/components/schemas/UnitSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TitleSimple": {
                "title": "TitleSimple",
                "description": "Attachable Title object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "titleable_type": {
                        "description": "Who can issue the Title; Chapter, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "titleable_id": {
                        "description": "The ID of the Title Issuer.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Title name with options seperated by a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Lord|Lady",
                        "nullable": false
                    },
                    "rank": {
                        "description": "For Realm Titles or where appropriate, their order of prescidence in that Realm expressed (usually) in multiples of 10, where Lord|Lady are typically 30.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 30,
                        "nullable": true
                    },
                    "peerage": {
                        "description": "The peerage (default None) of the Title; Gentry, Knight, Master, Nobility, None, Paragon, Retainer, or Squire",
                        "type": "string",
                        "format": "enum",
                        "default": "None",
                        "enum": [
                            "Gentry",
                            "Knight",
                            "Master",
                            "Nobility",
                            "None",
                            "Paragon",
                            "Retainer",
                            "Squire"
                        ],
                        "readOnly": false,
                        "example": 1,
                        "nullable": false
                    },
                    "is_roaming": {
                        "description": "Is the Title (default false) roaming, such as Dragonmaster?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is this Title (default true) still being given out?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "TitleSuperSimple": {
                "title": "TitleSuperSimpleSimple",
                "description": "Attachable Title object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "titleable_type": {
                        "description": "Who can issue the Title; Chapter, Persona, Realm, or Unit.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Persona",
                            "Realm",
                            "Unit"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "titleable_id": {
                        "description": "The ID of the Title Issuer.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The Title name with options seperated by a single |",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Lord|Lady",
                        "nullable": false
                    },
                    "rank": {
                        "description": "For Realm Titles or where appropriate, their order of prescidence in that Realm expressed (usually) in multiples of 10, where Lord|Lady are typically 30.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 30,
                        "nullable": true
                    },
                    "peerage": {
                        "description": "The peerage (default None) of the Title; Gentry, Knight, Master, Nobility, None, Paragon, Retainer, or Squire",
                        "type": "string",
                        "format": "enum",
                        "default": "None",
                        "enum": [
                            "Gentry",
                            "Knight",
                            "Master",
                            "Nobility",
                            "None",
                            "Paragon",
                            "Retainer",
                            "Squire"
                        ],
                        "readOnly": false,
                        "example": 1,
                        "nullable": false
                    },
                    "is_roaming": {
                        "description": "Is the Title (default false) roaming, such as Dragonmaster?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "is_active": {
                        "description": "Is this Title (default true) still being given out?",
                        "type": "integer",
                        "format": "enum",
                        "default": 1,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Tournament": {
                "description": "Tournament details.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * tournamentable (Chapter, Event, or Realm) (MorphTo): The Tournament sponsor type; Chapter, Event, or Realm.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "tournamentable_type",
                    "tournamentable_id",
                    "name",
                    "description",
                    "occured_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "tournamentable_type": {
                        "description": "The Tournament sponsor type; Chapter, Event, or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "tournamentable_id": {
                        "description": "The ID of the Tournament sponsor.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Tournament.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "KotB Tournament",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Tournament.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Keep on the Boarderlands annual tournament.",
                        "nullable": true
                    },
                    "occured_at": {
                        "description": "Date and time the Tournament occured.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": false,
                        "example": "2020-12-30 23:59:59",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "tournamentable": {
                        "description": "Attachable object that sponsored the Tournament.",
                        "type": "object",
                        "readOnly": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChapterSimple"
                            },
                            {
                                "$ref": "#/components/schemas/EventSimple"
                            },
                            {
                                "$ref": "#/components/schemas/RealmSimple"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TournamentSimple": {
                "title": "TournamentSimple",
                "description": "Attachable Tournament object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "tournamentable_type": {
                        "description": "The Tournament sponsor type; Chapter, Event, or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "tournamentable_id": {
                        "description": "The ID of the Tournament sponsor.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Tournament.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "KotB Tournament",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Tournament.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Keep on the Boarderlands annual tournament.",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "TournamentSuperSimple": {
                "title": "TournamentSuperSimpleSimple",
                "description": "Attachable Tournament object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "tournamentable_type": {
                        "description": "The Tournament sponsor type; Chapter, Event, or Realm.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Chapter",
                            "Event",
                            "Realm"
                        ],
                        "readOnly": false,
                        "example": "Chapter",
                        "nullable": false
                    },
                    "tournamentable_id": {
                        "description": "The ID of the Tournament sponsor.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "name": {
                        "description": "The name of the Tournament.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 50,
                        "readOnly": false,
                        "example": "KotB Tournament",
                        "nullable": false
                    },
                    "description": {
                        "description": "A description of the Tournament.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "Keep on the Boarderlands annual tournament.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Transaction": {
                "description": "Accounting Transactions.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * dues (Due) (HasMany): Dues linked to the Transaction\r\n * splits (Split) (HasMany): Splits for the Transaction\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "description",
                    "transaction_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "description": {
                        "description": "A description of the Transaction.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Dues Paid for Chibasama",
                        "nullable": false
                    },
                    "memo": {
                        "description": "A memo for the Transaction, if any",
                        "type": "string",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Paid in $2 bills.",
                        "nullable": true
                    },
                    "transaction_at": {
                        "description": "Date the Transaction occured.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "dues": {
                        "description": "Attachable & filterable array of Dues linked to the Transaction.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DueSimple"
                        },
                        "readOnly": true
                    },
                    "splits": {
                        "description": "Attachable & filterable array of Splits for the Transaction.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SplitSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "TransactionSimple": {
                "title": "TransactionSimple",
                "description": "Attachable Transaction object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "description": {
                        "description": "A description of the Transaction.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Dues Paid for Chibasama",
                        "nullable": false
                    },
                    "memo": {
                        "description": "A memo for the Transaction, if any",
                        "type": "string",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Paid in $2 bills.",
                        "nullable": true
                    },
                    "transaction_at": {
                        "description": "Date the Transaction occured.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "TransactionSuperSimple": {
                "title": "TransactionSuperSimpleSimple",
                "description": "Attachable Transaction object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "description": {
                        "description": "A description of the Transaction.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Dues Paid for Chibasama",
                        "nullable": false
                    },
                    "memo": {
                        "description": "A memo for the Transaction, if any",
                        "type": "string",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "Paid in $2 bills.",
                        "nullable": true
                    },
                    "transaction_at": {
                        "description": "Date the Transaction occured.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Unit": {
                "description": "Organizations within the broader scope of Amtgard.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * accounts (Account) (MorphMany): Accounts held by the Unit.\r\n * awards (Award) (MorphMany): Awards Unit can Issue.\r\n * awardIssuances (Issuance) (MorphMany): Awards Unit has been Issued.\r\n * events (Event) (MorphMany): Events run by this Unit.\r\n * issuanceGivens (Issuance) (MorphMany): All Issuances made by the Unit.\r\n * issuanceReceived (Issuance) (MorphMany): All Issuances received by the Unit.\r\n * members (Member) (HasMany): Unit Members.\r\n * officers (Officer) (MorphMany): Officers of the Unit.\r\n * offices (Office) (MorphMany): Unit Offices.\r\n * socials (Social) (MorphMany): Social media links or IDs.\r\n * titles (Title) (MorphMany): Titles Unit can Issue.\r\n * titleIssuances (Issuance) (MorphMany): Titles Unit has been Issued.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "type",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "type": {
                        "description": "Unit type; Company, Event, or Household.",
                        "type": "string",
                        "format": "enum",
                        "default": "Household",
                        "enum": [
                            "Company",
                            "Event",
                            "Household"
                        ],
                        "readOnly": false,
                        "example": "Company",
                        "nullable": false
                    },
                    "name": {
                        "description": "Name of the Unit.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Team Alpha Male",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Unit heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/units/42.jpg",
                        "nullable": true
                    },
                    "description": {
                        "description": "A public facing description of the Unit.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "We like to hang out in the most exclusive way possible.",
                        "nullable": true
                    },
                    "history": {
                        "description": "For use as the Unit requires, history of the Unit, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "No shit there we were...",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "accounts": {
                        "description": "Attachable & filterable array of Accounts held by the Unit.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountSimple"
                        },
                        "readOnly": true
                    },
                    "awards": {
                        "description": "Attachable & filterable array of Awards this Unit can Issue.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AwardSimple"
                        },
                        "readOnly": true
                    },
                    "awardIssuances": {
                        "description": "Attachable & filterable array of Awards this Unit has been Issued.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "events": {
                        "description": "Attachable & filterable array of Events run by this Unit.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventSimple"
                        },
                        "readOnly": true
                    },
                    "issuanceGivens": {
                        "description": "Attachable & filterable array of Issuances made by the Unit",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "issuanceReceived": {
                        "description": "Attachable & filterable array of Issuances received by the Unit.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    },
                    "members": {
                        "description": "Attachable & filterable array of Unit Members.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MemberSimple"
                        },
                        "readOnly": true
                    },
                    "officers": {
                        "description": "Attachable & filterable array of Officers of the Unit.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        },
                        "readOnly": true
                    },
                    "offices": {
                        "description": "Attachable & filterable array of Unit Offices.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfficeSimple"
                        },
                        "readOnly": true
                    },
                    "socials": {
                        "description": "Attachable & filterable array of Social media links or IDs.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SocialSimple"
                        },
                        "readOnly": true
                    },
                    "titles": {
                        "description": "Attachable & filterable array of Titles the Unit Issues.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TitleSimple"
                        },
                        "readOnly": true
                    },
                    "titleIssueds": {
                        "description": "Attachable & filterable array of Titles the Unit has been Issued.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        },
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "UnitSimple": {
                "title": "UnitSimple",
                "description": "Attachable Unit object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "type": {
                        "description": "Unit type; Company, Event, or Household.",
                        "type": "string",
                        "format": "enum",
                        "default": "Household",
                        "enum": [
                            "Company",
                            "Event",
                            "Household"
                        ],
                        "readOnly": false,
                        "example": "Company",
                        "nullable": false
                    },
                    "name": {
                        "description": "Name of the Unit.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Team Alpha Male",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Unit heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/units/42.jpg",
                        "nullable": true
                    },
                    "description": {
                        "description": "A public facing description of the Unit.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "We like to hang out in the most exclusive way possible.",
                        "nullable": true
                    },
                    "history": {
                        "description": "For use as the Unit requires, history of the Unit, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "No shit there we were...",
                        "nullable": true
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "UnitSuperSimple": {
                "title": "UnitSuperSimpleSimple",
                "description": "Attachable Unit object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "type": {
                        "description": "Unit type; Company, Event, or Household.",
                        "type": "string",
                        "format": "enum",
                        "default": "Household",
                        "enum": [
                            "Company",
                            "Event",
                            "Household"
                        ],
                        "readOnly": false,
                        "example": "Company",
                        "nullable": false
                    },
                    "name": {
                        "description": "Name of the Unit.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 100,
                        "readOnly": false,
                        "example": "Team Alpha Male",
                        "nullable": false
                    },
                    "heraldry": {
                        "description": "An internal link to an image of the Unit heraldry, if any.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/units/42.jpg",
                        "nullable": true
                    },
                    "description": {
                        "description": "A public facing description of the Unit.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "We like to hang out in the most exclusive way possible.",
                        "nullable": true
                    },
                    "history": {
                        "description": "For use as the Unit requires, history of the Unit, if any.",
                        "type": "string",
                        "format": "paragraph",
                        "maxLength": 16777215,
                        "readOnly": false,
                        "example": "No shit there we were...",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "User": {
                "description": "People signed up to the site.<br>The following relationships can be attached, and in the case of 'many' types, searched:\r\n * persona (Persona) (BelongsTo): Persona associated with the User.\r\n * passwordHistories (PasswordHistory) (HasMany): Past passwords (encrypted) this User has used.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "email",
                    "password",
                    "is_restricted"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "persona_id": {
                        "description": "ID of the User's Persona.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "email": {
                        "description": "Unique email used to identify and communicate with the User.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": false
                    },
                    "email_verified_at": {
                        "description": "When the User email was verified, if at all",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-12-30 23:59:59",
                        "nullable": true
                    },
                    "password": {
                        "description": "Encoded password string.",
                        "type": "string",
                        "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                        "writeOnly": true,
                        "example": "$2y$10$SoNOPPci0zg2xqBzhvVQN.DvkHLqJEhLAxyqTz85UNzJBdLI9asdf",
                        "nullable": false
                    },
                    "api_token": {
                        "description": "The API token for authentication",
                        "type": "string",
                        "maxLength": 80,
                        "readOnly": true,
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
                    },
                    "is_restricted": {
                        "description": "Is the User (default false) restricted from using the site?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    }
                },
                "type": "object"
            },
            "UserSimple": {
                "title": "UserSimple",
                "description": "Attachable User object with no attachments.",
                "properties": {
                    "persona_id": {
                        "description": "ID of the User's Persona.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "email": {
                        "description": "Unique email used to identify and communicate with the User.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": false
                    },
                    "email_verified_at": {
                        "description": "When the User email was verified, if at all",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-12-30 23:59:59",
                        "nullable": true
                    },
                    "password": {
                        "description": "Encoded password string.",
                        "type": "string",
                        "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                        "writeOnly": true,
                        "example": "$2y$10$SoNOPPci0zg2xqBzhvVQN.DvkHLqJEhLAxyqTz85UNzJBdLI9asdf",
                        "nullable": false
                    },
                    "is_restricted": {
                        "description": "Is the User (default false) restricted from using the site?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "UserLogin": {
                "title": "User",
                "description": "Attachable User login object with no attachments.",
                "properties": {
                    "persona_id": {
                        "description": "ID of the User's Persona.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "token": {
                        "description": "Login token for the User.",
                        "type": "string",
                        "readOnly": true,
                        "example": "yR1234D5gqZlgmiR1234YM01KDRJG1234KRHjA12",
                        "nullable": false
                    },
                    "email": {
                        "description": "Unique email used to identify and communicate with the User.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": false
                    },
                    "email_verified_at": {
                        "description": "When the User email was verified, if at all",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-12-30 23:59:59",
                        "nullable": true
                    },
                    "password": {
                        "description": "Encoded password string.",
                        "type": "string",
                        "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                        "writeOnly": true,
                        "example": "$2y$10$SoNOPPci0zg2xqBzhvVQN.DvkHLqJEhLAxyqTz85UNzJBdLI9asdf",
                        "nullable": false
                    },
                    "is_restricted": {
                        "description": "Is the User (default false) restricted from using the site?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "UserSuperSimple": {
                "title": "UserSuperSimpleSimple",
                "description": "Attachable User object with no attachments or CUD data.",
                "properties": {
                    "persona_id": {
                        "description": "ID of the User's Persona.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "email": {
                        "description": "Unique email used to identify and communicate with the User.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": false
                    },
                    "email_verified_at": {
                        "description": "When the User email was verified, if at all",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-12-30 23:59:59",
                        "nullable": true
                    },
                    "password": {
                        "description": "Encoded password string.",
                        "type": "string",
                        "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                        "writeOnly": true,
                        "example": "$2y$10$SoNOPPci0zg2xqBzhvVQN.DvkHLqJEhLAxyqTz85UNzJBdLI9asdf",
                        "nullable": false
                    },
                    "is_restricted": {
                        "description": "Is the User (default false) restricted from using the site?",
                        "type": "integer",
                        "format": "enum",
                        "default": 0,
                        "enum": [
                            0,
                            1
                        ],
                        "readOnly": false,
                        "example": 0,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "Waiver": {
                "description": "Digital storage of legal Waivers.<br>The following relationships can be attached, and in the case of plural relations, searched:\r\n * ageVerifiedBy (Persona) (BelongsTo): The Persona that verified the Waiver signer age, if it has been.\r\n * guests (Guest) (BelongsTo): The Guest this Waiver is for, if any.\r\n * location (Location) (BelongsTo): The Waiver address fields values.\r\n * persona (Persona) (BelongsTo): Persona this Waiver is for, if any.\r\n * pronoun (Pronoun) (BelongsTo): Pronoun for the individual being Waivered, if known.\r\n * createdBy (User) (BelongsTo): User that created it.\r\n * updatedBy (User) (BelongsTo): User that last updated it (if any).\r\n * deletedBy (User) (BelongsTo): User that deleted it (if any).",
                "required": [
                    "waiverable_type",
                    "waiverable_id",
                    "player",
                    "signed_at"
                ],
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "guest_id": {
                        "description": "The ID of the Guest this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "The Waiver address fields values.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "pronoun_id": {
                        "description": "The ID of the Pronoun for the individual being Waivered, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "persona_id": {
                        "description": "The ID of the Persona this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiverable_type": {
                        "description": "The type of entity accepting the Waiver; Realm or Event.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "waiverable_id": {
                        "description": "The ID of the entity accepting the Waiver.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "file": {
                        "description": "An internal link to an image of the original physical Waiver.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/waivers/42.jpg",
                        "nullable": true
                    },
                    "player": {
                        "description": "The Waiver Mundane name field value.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 150,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": false
                    },
                    "email": {
                        "description": "The Waiver email field value, if any",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": true
                    },
                    "phone": {
                        "description": "The Waiver phone field value, if any",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "dob": {
                        "description": "The Waiver date of birth field value.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_at": {
                        "description": "The date the Waiver signer age is verified, if it has been.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_by": {
                        "description": "The ID of the Persona that verified the Waiver signer age, if it has been.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "guardian": {
                        "description": "The Waiver guardian name, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Richard Smith",
                        "nullable": true
                    },
                    "emergency_name": {
                        "description": "The Waiver emergency contact field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Becky Smith",
                        "nullable": true
                    },
                    "emergency_relationship": {
                        "description": "The Waiver emergency contact relationship field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Mom",
                        "nullable": true
                    },
                    "emergency_phone": {
                        "description": "The Waiver emergency contact phone field, if any.",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "signed_at": {
                        "description": "Date the Waiver was signed.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deletedBy": {
                        "$ref": "#/components/schemas/UserSimple"
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "ageVerifiedBy": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "guest": {
                        "$ref": "#/components/schemas/GuestSimple"
                    },
                    "location": {
                        "$ref": "#/components/schemas/LocationSimple"
                    },
                    "persona": {
                        "$ref": "#/components/schemas/PersonaSimple"
                    },
                    "pronoun": {
                        "$ref": "#/components/schemas/PronounSimple"
                    }
                },
                "type": "object"
            },
            "WaiverSimple": {
                "title": "WaiverSimple",
                "description": "Attachable Waiver object with no attachments.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "guest_id": {
                        "description": "The ID of the Guest this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "The Waiver address fields values.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "pronoun_id": {
                        "description": "The ID of the Pronoun for the individual being Waivered, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "persona_id": {
                        "description": "The ID of the Persona this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiverable_type": {
                        "description": "The type of entity accepting the Waiver; Realm or Event.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "waiverable_id": {
                        "description": "The ID of the entity accepting the Waiver.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "file": {
                        "description": "An internal link to an image of the original physical Waiver.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/waivers/42.jpg",
                        "nullable": true
                    },
                    "player": {
                        "description": "The Waiver Mundane name field value.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 150,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": false
                    },
                    "email": {
                        "description": "The Waiver email field value, if any",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": true
                    },
                    "phone": {
                        "description": "The Waiver phone field value, if any",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "dob": {
                        "description": "The Waiver date of birth field value.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_at": {
                        "description": "The date the Waiver signer age is verified, if it has been.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_by": {
                        "description": "The ID of the Persona that verified the Waiver signer age, if it has been.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "guardian": {
                        "description": "The Waiver guardian name, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Richard Smith",
                        "nullable": true
                    },
                    "emergency_name": {
                        "description": "The Waiver emergency contact field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Becky Smith",
                        "nullable": true
                    },
                    "emergency_relationship": {
                        "description": "The Waiver emergency contact relationship field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Mom",
                        "nullable": true
                    },
                    "emergency_phone": {
                        "description": "The Waiver emergency contact phone field, if any.",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "signed_at": {
                        "description": "Date the Waiver was signed.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    },
                    "created_by": {
                        "description": "The User that created this record.",
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "readOnly": true,
                        "example": 42
                    },
                    "updated_by": {
                        "description": "The last User to update this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "deleted_by": {
                        "description": "The User that softdeleted this record.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "created_at": {
                        "description": "When the entry was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "updated_at": {
                        "description": "When the entry was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    },
                    "deleted_at": {
                        "description": "When the entry was softdeleted.  Null if not softdeleted.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2020-12-30 23:59:59"
                    }
                },
                "type": "object"
            },
            "WaiverSuperSimple": {
                "title": "WaiverSuperSimpleSimple",
                "description": "Attachable Waiver object with no attachments or CUD data.",
                "properties": {
                    "id": {
                        "description": "The entry's ID.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 42
                    },
                    "guest_id": {
                        "description": "The ID of the Guest this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "location_id": {
                        "description": "The Waiver address fields values.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "pronoun_id": {
                        "description": "The ID of the Pronoun for the individual being Waivered, if known.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "persona_id": {
                        "description": "The ID of the Persona this Waiver is for, if any.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "waiverable_type": {
                        "description": "The type of entity accepting the Waiver; Realm or Event.",
                        "type": "string",
                        "format": "enum",
                        "enum": [
                            "Realm",
                            "Event"
                        ],
                        "readOnly": false,
                        "example": "Realm",
                        "nullable": false
                    },
                    "waiverable_id": {
                        "description": "The ID of the entity accepting the Waiver.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": false
                    },
                    "file": {
                        "description": "An internal link to an image of the original physical Waiver.",
                        "type": "string",
                        "format": "filename",
                        "maxLength": 191,
                        "readOnly": false,
                        "example": "images/waivers/42.jpg",
                        "nullable": true
                    },
                    "player": {
                        "description": "The Waiver Mundane name field value.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "maxLength": 150,
                        "readOnly": false,
                        "example": "John Smith",
                        "nullable": false
                    },
                    "email": {
                        "description": "The Waiver email field value, if any",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "readOnly": false,
                        "example": "nobody@nowhere.net",
                        "nullable": true
                    },
                    "phone": {
                        "description": "The Waiver phone field value, if any",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "dob": {
                        "description": "The Waiver date of birth field value.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_at": {
                        "description": "The date the Waiver signer age is verified, if it has been.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": true
                    },
                    "age_verified_by": {
                        "description": "The ID of the Persona that verified the Waiver signer age, if it has been.",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": false,
                        "example": 42,
                        "nullable": true
                    },
                    "guardian": {
                        "description": "The Waiver guardian name, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Richard Smith",
                        "nullable": true
                    },
                    "emergency_name": {
                        "description": "The Waiver emergency contact field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Becky Smith",
                        "nullable": true
                    },
                    "emergency_relationship": {
                        "description": "The Waiver emergency contact relationship field, if any.",
                        "type": "string",
                        "format": "uppercase first letter",
                        "readOnly": false,
                        "example": "Mom",
                        "nullable": true
                    },
                    "emergency_phone": {
                        "description": "The Waiver emergency contact phone field, if any.",
                        "type": "string",
                        "maxLength": 25,
                        "readOnly": false,
                        "example": "123-456-7890",
                        "nullable": true
                    },
                    "signed_at": {
                        "description": "Date the Waiver was signed.",
                        "type": "string",
                        "format": "date",
                        "readOnly": false,
                        "example": "2020-12-30",
                        "nullable": false
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "search": {
                "name": "search",
                "in": "query",
                "description": "Search any column for value. Ex: search[column]=value.",
                "required": false,
                "style": "deepObject",
                "schema": {
                    "type": "object",
                    "example": {
                        "id": "42"
                    }
                }
            },
            "columns": {
                "name": "columns[]",
                "in": "query",
                "description": "Restrict results to given column(s). If used with 'with', you must also include the id column and related foreign key. Ex: columns[]=id",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "snake_case",
                        "example": "id"
                    },
                    "uniqueItems": true
                }
            },
            "with": {
                "name": "with[]",
                "in": "query",
                "description": "Attach given related objects (nestable with dot notation ['parent.child']) to the results. Mutually exclusive of 'with'. Ex: with[]=createdBy.persona.chapter",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "dotNotation",
                        "example": "createdBy.persona"
                    },
                    "uniqueItems": true
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "Maximum number of results to return. Ex: limit=5",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "skip": {
                "name": "skip",
                "in": "query",
                "description": "For pagination, number of results to skip.  Must be used with 'limit' or it will be ignored. Ex: skip=5&limit=5",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "description": "Field (key, field name) and direction (value, either 'asc' or 'desc') in which the results should be sorted by column. Ex: direction[column1]=desc&direction[column2]=asc",
                "required": false,
                "style": "deepObject",
                "schema": {
                    "type": "object",
                    "example": {
                        "id": "desc"
                    }
                }
            }
        },
        "requestBodies": {
            "login": {
                "description": "Login data.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "required": [
                                "email",
                                "password",
                                "password_confirm",
                                "device_name"
                            ],
                            "properties": {
                                "email": {
                                    "description": "Login email.",
                                    "type": "string",
                                    "format": "email",
                                    "maxLength": 191,
                                    "example": "nobody@nowhere.net"
                                },
                                "password": {
                                    "description": "Login password.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "password_confirm": {
                                    "description": "Login password, confirmed.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "device_name": {
                                    "description": "Login device information.",
                                    "type": "string",
                                    "example": "Bob'sS22"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "forgot": {
                "description": "Forgot Password Request.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "required": [
                                "email",
                                "device_name"
                            ],
                            "properties": {
                                "email": {
                                    "description": "User email.",
                                    "type": "string",
                                    "format": "email",
                                    "maxLength": 191,
                                    "example": "nobody@nowhere.net"
                                },
                                "device_name": {
                                    "description": "User device information.",
                                    "type": "string",
                                    "example": "Bob'sS22"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "reset": {
                "description": "Reset Password Request.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "required": [
                                "email",
                                "password_token",
                                "password",
                                "password_confirm",
                                "device_name"
                            ],
                            "properties": {
                                "email": {
                                    "description": "User email.",
                                    "type": "string",
                                    "format": "email",
                                    "maxLength": 191,
                                    "example": "nobody@nowhere.net"
                                },
                                "password_token": {
                                    "description": "Password reset token generated by the system and sent to the User.",
                                    "type": "string",
                                    "maxLength": 191,
                                    "example": "fjwqp938rnjgp0q98rngqie3wrnfmpgq9enrgfpqi9me3rwfgpqienrgjp9qeunrgpqoeimrg0qe"
                                },
                                "password": {
                                    "description": "New password.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "password_confirm": {
                                    "description": "New password, confirmed.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "device_name": {
                                    "description": "User device information.",
                                    "type": "string",
                                    "example": "Bob'sS22"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "sendInvite": {
                "description": "Send User invitation.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "required": [
                                "email",
                                "persona_id"
                            ],
                            "properties": {
                                "email": {
                                    "description": "New User's email.",
                                    "type": "string",
                                    "format": "email",
                                    "maxLength": 191,
                                    "example": "nobody@nowhere.net"
                                },
                                "persona_id": {
                                    "description": "Persona for the new User.",
                                    "type": "integer",
                                    "format": "int32",
                                    "example": 42
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "register": {
                "description": "Accept invitation to create a new User and claim a Persona.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "required": [
                                "invite_token",
                                "email",
                                "password",
                                "password_confirm",
                                "is_agreed",
                                "device_name"
                            ],
                            "properties": {
                                "email": {
                                    "description": "User email.",
                                    "type": "string",
                                    "format": "email",
                                    "maxLength": 191,
                                    "example": "nobody@nowhere.net"
                                },
                                "invite_token": {
                                    "description": "Invitation token generated by the system and sent to the User.",
                                    "type": "string",
                                    "maxLength": 191,
                                    "example": "fjwqp938rnjgp0q98rngqie3wrnfmpgq9enrgfpqi9me3rwfgpqienrgjp9qeunrgpqoeimrg0qe"
                                },
                                "password": {
                                    "description": "User password.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "password_confirm": {
                                    "description": "User password, confirmed.",
                                    "type": "string",
                                    "format": "8-40 characters, at least 1 uppercase, at least 1 lowercase, both letters and numbers, not common",
                                    "maxLength": 40
                                },
                                "is_agreed": {
                                    "description": "If the User has agreed to the Terms and Conditions and our Privacy Policy.",
                                    "type": "integer",
                                    "format": "enum",
                                    "enum": [
                                        0,
                                        1
                                    ],
                                    "example": 1
                                },
                                "device_name": {
                                    "description": "User device information.",
                                    "type": "string",
                                    "example": "Bob'sS22"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "Account": {
                "description": "Account object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/AccountSimple"
                        }
                    }
                }
            },
            "Archetype": {
                "description": "Archetype object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/ArchetypeSimple"
                        }
                    }
                }
            },
            "Attendance": {
                "description": "Attendance object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/AttendanceSimple"
                        }
                    }
                }
            },
            "Award": {
                "description": "Award object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/AwardSimple"
                        }
                    }
                }
            },
            "Chapter": {
                "description": "Chapter object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/ChapterSimple"
                        }
                    }
                }
            },
            "Chaptertype": {
                "description": "Chaptertype object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/ChaptertypeSimple"
                        }
                    }
                }
            },
            "Crat": {
                "description": "Crat object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/CratSimple"
                        }
                    }
                }
            },
            "Due": {
                "description": "Due object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/DueSimple"
                        }
                    }
                }
            },
            "Event": {
                "description": "Event object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/EventSimple"
                        }
                    }
                }
            },
            "Guest": {
                "description": "Guest object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/GuestSimple"
                        }
                    }
                }
            },
            "Issuance": {
                "description": "Issuance object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/IssuanceSimple"
                        }
                    }
                }
            },
            "Location": {
                "description": "Location object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/LocationSimple"
                        }
                    }
                }
            },
            "Meetup": {
                "description": "Meetup object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/MeetupSimple"
                        }
                    }
                }
            },
            "Member": {
                "description": "Member object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/MemberSimple"
                        }
                    }
                }
            },
            "Office": {
                "description": "Office object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/OfficeSimple"
                        }
                    }
                }
            },
            "Officer": {
                "description": "Officer object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/OfficerSimple"
                        }
                    }
                }
            },
            "Persona": {
                "description": "Persona object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/PersonaSimple"
                        }
                    }
                }
            },
            "Pronoun": {
                "description": "Pronoun object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/PronounSimple"
                        }
                    }
                }
            },
            "Realm": {
                "description": "Realm object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/RealmSimple"
                        }
                    }
                }
            },
            "Recommendation": {
                "description": "Recommendation object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/RecommendationSimple"
                        }
                    }
                }
            },
            "Reconciliation": {
                "description": "Reconciliation object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/ReconciliationSimple"
                        }
                    }
                }
            },
            "Reign": {
                "description": "Reign object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/ReignSimple"
                        }
                    }
                }
            },
            "Social": {
                "description": "Social object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/SocialSimple"
                        }
                    }
                }
            },
            "Split": {
                "description": "Split object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/SplitSimple"
                        }
                    }
                }
            },
            "Suspension": {
                "description": "Suspension object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/SuspensionSimple"
                        }
                    }
                }
            },
            "Title": {
                "description": "Title object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/TitleSimple"
                        }
                    }
                }
            },
            "Tournament": {
                "description": "Tournament object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/TournamentSimple"
                        }
                    }
                }
            },
            "Transaction": {
                "description": "Transaction object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/TransactionSimple"
                        }
                    }
                }
            },
            "Unit": {
                "description": "Unit object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/UnitSimple"
                        }
                    }
                }
            },
            "User": {
                "description": "User object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/UserSimple"
                        }
                    }
                }
            },
            "Waiver": {
                "description": "Waiver object that needs to be added or updated.",
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/WaiverSimple"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "bearer_token": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "bearer_token": []
        }
    ]
}